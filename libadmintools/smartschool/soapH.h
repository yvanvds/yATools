/* soapH.h
   Generated by gSOAP 2.8.17r from interface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_bool(soap, data),0) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns1__returnJsonErrorCodes
#define SOAP_TYPE_ns1__returnJsonErrorCodes (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__returnJsonErrorCodes(struct soap*, struct ns1__returnJsonErrorCodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__returnJsonErrorCodes(struct soap*, const struct ns1__returnJsonErrorCodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnJsonErrorCodes(struct soap*, const char*, int, const struct ns1__returnJsonErrorCodes *, const char*);
SOAP_FMAC3 struct ns1__returnJsonErrorCodes * SOAP_FMAC4 soap_in_ns1__returnJsonErrorCodes(struct soap*, const char*, struct ns1__returnJsonErrorCodes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__returnJsonErrorCodes(struct soap*, const struct ns1__returnJsonErrorCodes *, const char*, const char*);

#ifndef soap_write_ns1__returnJsonErrorCodes
#define soap_write_ns1__returnJsonErrorCodes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__returnJsonErrorCodes(soap, data),0) || soap_put_ns1__returnJsonErrorCodes(soap, data, "ns1:returnJsonErrorCodes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__returnJsonErrorCodes * SOAP_FMAC4 soap_get_ns1__returnJsonErrorCodes(struct soap*, struct ns1__returnJsonErrorCodes *, const char*, const char*);

#ifndef soap_read_ns1__returnJsonErrorCodes
#define soap_read_ns1__returnJsonErrorCodes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__returnJsonErrorCodes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__returnJsonErrorCodes * SOAP_FMAC2 soap_instantiate_ns1__returnJsonErrorCodes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__returnJsonErrorCodes * soap_new_ns1__returnJsonErrorCodes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__returnJsonErrorCodes(soap, n, NULL, NULL, NULL); }

inline struct ns1__returnJsonErrorCodes * soap_new_req_ns1__returnJsonErrorCodes(struct soap *soap) { struct ns1__returnJsonErrorCodes *_p = soap_instantiate_ns1__returnJsonErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnJsonErrorCodes(soap, _p); } return _p; }

inline struct ns1__returnJsonErrorCodes * soap_new_set_ns1__returnJsonErrorCodes(struct soap *soap) { struct ns1__returnJsonErrorCodes *_p = soap_instantiate_ns1__returnJsonErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnJsonErrorCodes(soap, _p); } return _p; }

inline void soap_delete_ns1__returnJsonErrorCodes(struct soap *soap, struct ns1__returnJsonErrorCodes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__returnJsonErrorCodes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__returnJsonErrorCodesResponse
#define SOAP_TYPE_ns1__returnJsonErrorCodesResponse (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__returnJsonErrorCodesResponse(struct soap*, struct ns1__returnJsonErrorCodesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__returnJsonErrorCodesResponse(struct soap*, const struct ns1__returnJsonErrorCodesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnJsonErrorCodesResponse(struct soap*, const char*, int, const struct ns1__returnJsonErrorCodesResponse *, const char*);
SOAP_FMAC3 struct ns1__returnJsonErrorCodesResponse * SOAP_FMAC4 soap_in_ns1__returnJsonErrorCodesResponse(struct soap*, const char*, struct ns1__returnJsonErrorCodesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__returnJsonErrorCodesResponse(struct soap*, const struct ns1__returnJsonErrorCodesResponse *, const char*, const char*);

#ifndef soap_write_ns1__returnJsonErrorCodesResponse
#define soap_write_ns1__returnJsonErrorCodesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__returnJsonErrorCodesResponse(soap, data),0) || soap_put_ns1__returnJsonErrorCodesResponse(soap, data, "ns1:returnJsonErrorCodesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__returnJsonErrorCodesResponse * SOAP_FMAC4 soap_get_ns1__returnJsonErrorCodesResponse(struct soap*, struct ns1__returnJsonErrorCodesResponse *, const char*, const char*);

#ifndef soap_read_ns1__returnJsonErrorCodesResponse
#define soap_read_ns1__returnJsonErrorCodesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__returnJsonErrorCodesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__returnJsonErrorCodesResponse * SOAP_FMAC2 soap_instantiate_ns1__returnJsonErrorCodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__returnJsonErrorCodesResponse * soap_new_ns1__returnJsonErrorCodesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__returnJsonErrorCodesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__returnJsonErrorCodesResponse * soap_new_req_ns1__returnJsonErrorCodesResponse(struct soap *soap, std::string& return_) { struct ns1__returnJsonErrorCodesResponse *_p = soap_instantiate_ns1__returnJsonErrorCodesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnJsonErrorCodesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__returnJsonErrorCodesResponse * soap_new_set_ns1__returnJsonErrorCodesResponse(struct soap *soap, std::string& return_) { struct ns1__returnJsonErrorCodesResponse *_p = soap_instantiate_ns1__returnJsonErrorCodesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnJsonErrorCodesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__returnJsonErrorCodesResponse(struct soap *soap, struct ns1__returnJsonErrorCodesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__returnJsonErrorCodesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__returnCsvErrorCodes
#define SOAP_TYPE_ns1__returnCsvErrorCodes (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__returnCsvErrorCodes(struct soap*, struct ns1__returnCsvErrorCodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__returnCsvErrorCodes(struct soap*, const struct ns1__returnCsvErrorCodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnCsvErrorCodes(struct soap*, const char*, int, const struct ns1__returnCsvErrorCodes *, const char*);
SOAP_FMAC3 struct ns1__returnCsvErrorCodes * SOAP_FMAC4 soap_in_ns1__returnCsvErrorCodes(struct soap*, const char*, struct ns1__returnCsvErrorCodes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__returnCsvErrorCodes(struct soap*, const struct ns1__returnCsvErrorCodes *, const char*, const char*);

#ifndef soap_write_ns1__returnCsvErrorCodes
#define soap_write_ns1__returnCsvErrorCodes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__returnCsvErrorCodes(soap, data),0) || soap_put_ns1__returnCsvErrorCodes(soap, data, "ns1:returnCsvErrorCodes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__returnCsvErrorCodes * SOAP_FMAC4 soap_get_ns1__returnCsvErrorCodes(struct soap*, struct ns1__returnCsvErrorCodes *, const char*, const char*);

#ifndef soap_read_ns1__returnCsvErrorCodes
#define soap_read_ns1__returnCsvErrorCodes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__returnCsvErrorCodes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__returnCsvErrorCodes * SOAP_FMAC2 soap_instantiate_ns1__returnCsvErrorCodes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__returnCsvErrorCodes * soap_new_ns1__returnCsvErrorCodes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__returnCsvErrorCodes(soap, n, NULL, NULL, NULL); }

inline struct ns1__returnCsvErrorCodes * soap_new_req_ns1__returnCsvErrorCodes(struct soap *soap) { struct ns1__returnCsvErrorCodes *_p = soap_instantiate_ns1__returnCsvErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnCsvErrorCodes(soap, _p); } return _p; }

inline struct ns1__returnCsvErrorCodes * soap_new_set_ns1__returnCsvErrorCodes(struct soap *soap) { struct ns1__returnCsvErrorCodes *_p = soap_instantiate_ns1__returnCsvErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnCsvErrorCodes(soap, _p); } return _p; }

inline void soap_delete_ns1__returnCsvErrorCodes(struct soap *soap, struct ns1__returnCsvErrorCodes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__returnCsvErrorCodes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__returnCsvErrorCodesResponse
#define SOAP_TYPE_ns1__returnCsvErrorCodesResponse (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__returnCsvErrorCodesResponse(struct soap*, struct ns1__returnCsvErrorCodesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__returnCsvErrorCodesResponse(struct soap*, const struct ns1__returnCsvErrorCodesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnCsvErrorCodesResponse(struct soap*, const char*, int, const struct ns1__returnCsvErrorCodesResponse *, const char*);
SOAP_FMAC3 struct ns1__returnCsvErrorCodesResponse * SOAP_FMAC4 soap_in_ns1__returnCsvErrorCodesResponse(struct soap*, const char*, struct ns1__returnCsvErrorCodesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__returnCsvErrorCodesResponse(struct soap*, const struct ns1__returnCsvErrorCodesResponse *, const char*, const char*);

#ifndef soap_write_ns1__returnCsvErrorCodesResponse
#define soap_write_ns1__returnCsvErrorCodesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__returnCsvErrorCodesResponse(soap, data),0) || soap_put_ns1__returnCsvErrorCodesResponse(soap, data, "ns1:returnCsvErrorCodesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__returnCsvErrorCodesResponse * SOAP_FMAC4 soap_get_ns1__returnCsvErrorCodesResponse(struct soap*, struct ns1__returnCsvErrorCodesResponse *, const char*, const char*);

#ifndef soap_read_ns1__returnCsvErrorCodesResponse
#define soap_read_ns1__returnCsvErrorCodesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__returnCsvErrorCodesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__returnCsvErrorCodesResponse * SOAP_FMAC2 soap_instantiate_ns1__returnCsvErrorCodesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__returnCsvErrorCodesResponse * soap_new_ns1__returnCsvErrorCodesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__returnCsvErrorCodesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__returnCsvErrorCodesResponse * soap_new_req_ns1__returnCsvErrorCodesResponse(struct soap *soap, std::string& return_) { struct ns1__returnCsvErrorCodesResponse *_p = soap_instantiate_ns1__returnCsvErrorCodesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnCsvErrorCodesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__returnCsvErrorCodesResponse * soap_new_set_ns1__returnCsvErrorCodesResponse(struct soap *soap, std::string& return_) { struct ns1__returnCsvErrorCodesResponse *_p = soap_instantiate_ns1__returnCsvErrorCodesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnCsvErrorCodesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__returnCsvErrorCodesResponse(struct soap *soap, struct ns1__returnCsvErrorCodesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__returnCsvErrorCodesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__returnErrorCodes
#define SOAP_TYPE_ns1__returnErrorCodes (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__returnErrorCodes(struct soap*, struct ns1__returnErrorCodes *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__returnErrorCodes(struct soap*, const struct ns1__returnErrorCodes *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__returnErrorCodes(struct soap*, const char*, int, const struct ns1__returnErrorCodes *, const char*);
SOAP_FMAC3 struct ns1__returnErrorCodes * SOAP_FMAC4 soap_in_ns1__returnErrorCodes(struct soap*, const char*, struct ns1__returnErrorCodes *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__returnErrorCodes(struct soap*, const struct ns1__returnErrorCodes *, const char*, const char*);

#ifndef soap_write_ns1__returnErrorCodes
#define soap_write_ns1__returnErrorCodes(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__returnErrorCodes(soap, data),0) || soap_put_ns1__returnErrorCodes(soap, data, "ns1:returnErrorCodes", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__returnErrorCodes * SOAP_FMAC4 soap_get_ns1__returnErrorCodes(struct soap*, struct ns1__returnErrorCodes *, const char*, const char*);

#ifndef soap_read_ns1__returnErrorCodes
#define soap_read_ns1__returnErrorCodes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__returnErrorCodes(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__returnErrorCodes * SOAP_FMAC2 soap_instantiate_ns1__returnErrorCodes(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__returnErrorCodes * soap_new_ns1__returnErrorCodes(struct soap *soap, int n = -1) { return soap_instantiate_ns1__returnErrorCodes(soap, n, NULL, NULL, NULL); }

inline struct ns1__returnErrorCodes * soap_new_req_ns1__returnErrorCodes(struct soap *soap) { struct ns1__returnErrorCodes *_p = soap_instantiate_ns1__returnErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnErrorCodes(soap, _p); } return _p; }

inline struct ns1__returnErrorCodes * soap_new_set_ns1__returnErrorCodes(struct soap *soap) { struct ns1__returnErrorCodes *_p = soap_instantiate_ns1__returnErrorCodes(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__returnErrorCodes(soap, _p); } return _p; }

inline void soap_delete_ns1__returnErrorCodes(struct soap *soap, struct ns1__returnErrorCodes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__returnErrorCodes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getStudentCareer
#define SOAP_TYPE_ns1__getStudentCareer (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getStudentCareer(struct soap*, struct ns1__getStudentCareer *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getStudentCareer(struct soap*, const struct ns1__getStudentCareer *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStudentCareer(struct soap*, const char*, int, const struct ns1__getStudentCareer *, const char*);
SOAP_FMAC3 struct ns1__getStudentCareer * SOAP_FMAC4 soap_in_ns1__getStudentCareer(struct soap*, const char*, struct ns1__getStudentCareer *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getStudentCareer(struct soap*, const struct ns1__getStudentCareer *, const char*, const char*);

#ifndef soap_write_ns1__getStudentCareer
#define soap_write_ns1__getStudentCareer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getStudentCareer(soap, data),0) || soap_put_ns1__getStudentCareer(soap, data, "ns1:getStudentCareer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getStudentCareer * SOAP_FMAC4 soap_get_ns1__getStudentCareer(struct soap*, struct ns1__getStudentCareer *, const char*, const char*);

#ifndef soap_read_ns1__getStudentCareer
#define soap_read_ns1__getStudentCareer(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getStudentCareer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getStudentCareer * SOAP_FMAC2 soap_instantiate_ns1__getStudentCareer(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getStudentCareer * soap_new_ns1__getStudentCareer(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getStudentCareer(soap, n, NULL, NULL, NULL); }

inline struct ns1__getStudentCareer * soap_new_req_ns1__getStudentCareer(struct soap *soap, std::string& accesscode, std::string& userIdentifier) { struct ns1__getStudentCareer *_p = soap_instantiate_ns1__getStudentCareer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getStudentCareer(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; } return _p; }

inline struct ns1__getStudentCareer * soap_new_set_ns1__getStudentCareer(struct soap *soap, std::string& accesscode, std::string& userIdentifier) { struct ns1__getStudentCareer *_p = soap_instantiate_ns1__getStudentCareer(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getStudentCareer(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; } return _p; }

inline void soap_delete_ns1__getStudentCareer(struct soap *soap, struct ns1__getStudentCareer *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getStudentCareer(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getStudentCareerResponse
#define SOAP_TYPE_ns1__getStudentCareerResponse (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getStudentCareerResponse(struct soap*, struct ns1__getStudentCareerResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getStudentCareerResponse(struct soap*, const struct ns1__getStudentCareerResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getStudentCareerResponse(struct soap*, const char*, int, const struct ns1__getStudentCareerResponse *, const char*);
SOAP_FMAC3 struct ns1__getStudentCareerResponse * SOAP_FMAC4 soap_in_ns1__getStudentCareerResponse(struct soap*, const char*, struct ns1__getStudentCareerResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getStudentCareerResponse(struct soap*, const struct ns1__getStudentCareerResponse *, const char*, const char*);

#ifndef soap_write_ns1__getStudentCareerResponse
#define soap_write_ns1__getStudentCareerResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getStudentCareerResponse(soap, data),0) || soap_put_ns1__getStudentCareerResponse(soap, data, "ns1:getStudentCareerResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getStudentCareerResponse * SOAP_FMAC4 soap_get_ns1__getStudentCareerResponse(struct soap*, struct ns1__getStudentCareerResponse *, const char*, const char*);

#ifndef soap_read_ns1__getStudentCareerResponse
#define soap_read_ns1__getStudentCareerResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getStudentCareerResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getStudentCareerResponse * SOAP_FMAC2 soap_instantiate_ns1__getStudentCareerResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getStudentCareerResponse * soap_new_ns1__getStudentCareerResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getStudentCareerResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getStudentCareerResponse * soap_new_req_ns1__getStudentCareerResponse(struct soap *soap, std::string& return_) { struct ns1__getStudentCareerResponse *_p = soap_instantiate_ns1__getStudentCareerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getStudentCareerResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getStudentCareerResponse * soap_new_set_ns1__getStudentCareerResponse(struct soap *soap, std::string& return_) { struct ns1__getStudentCareerResponse *_p = soap_instantiate_ns1__getStudentCareerResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getStudentCareerResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getStudentCareerResponse(struct soap *soap, struct ns1__getStudentCareerResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getStudentCareerResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveSignature
#define SOAP_TYPE_ns1__saveSignature (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveSignature(struct soap*, struct ns1__saveSignature *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveSignature(struct soap*, const struct ns1__saveSignature *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveSignature(struct soap*, const char*, int, const struct ns1__saveSignature *, const char*);
SOAP_FMAC3 struct ns1__saveSignature * SOAP_FMAC4 soap_in_ns1__saveSignature(struct soap*, const char*, struct ns1__saveSignature *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveSignature(struct soap*, const struct ns1__saveSignature *, const char*, const char*);

#ifndef soap_write_ns1__saveSignature
#define soap_write_ns1__saveSignature(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveSignature(soap, data),0) || soap_put_ns1__saveSignature(soap, data, "ns1:saveSignature", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveSignature * SOAP_FMAC4 soap_get_ns1__saveSignature(struct soap*, struct ns1__saveSignature *, const char*, const char*);

#ifndef soap_read_ns1__saveSignature
#define soap_read_ns1__saveSignature(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveSignature(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveSignature * SOAP_FMAC2 soap_instantiate_ns1__saveSignature(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveSignature * soap_new_ns1__saveSignature(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveSignature(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveSignature * soap_new_req_ns1__saveSignature(struct soap *soap, std::string& accesscode, std::string& userIdentifier, int accountType, std::string& signature) { struct ns1__saveSignature *_p = soap_instantiate_ns1__saveSignature(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveSignature(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->accountType = accountType; _p->signature = signature; } return _p; }

inline struct ns1__saveSignature * soap_new_set_ns1__saveSignature(struct soap *soap, std::string& accesscode, std::string& userIdentifier, int accountType, std::string& signature) { struct ns1__saveSignature *_p = soap_instantiate_ns1__saveSignature(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveSignature(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->accountType = accountType; _p->signature = signature; } return _p; }

inline void soap_delete_ns1__saveSignature(struct soap *soap, struct ns1__saveSignature *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveSignature(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveSignatureResponse
#define SOAP_TYPE_ns1__saveSignatureResponse (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveSignatureResponse(struct soap*, struct ns1__saveSignatureResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveSignatureResponse(struct soap*, const struct ns1__saveSignatureResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveSignatureResponse(struct soap*, const char*, int, const struct ns1__saveSignatureResponse *, const char*);
SOAP_FMAC3 struct ns1__saveSignatureResponse * SOAP_FMAC4 soap_in_ns1__saveSignatureResponse(struct soap*, const char*, struct ns1__saveSignatureResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveSignatureResponse(struct soap*, const struct ns1__saveSignatureResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveSignatureResponse
#define soap_write_ns1__saveSignatureResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveSignatureResponse(soap, data),0) || soap_put_ns1__saveSignatureResponse(soap, data, "ns1:saveSignatureResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveSignatureResponse * SOAP_FMAC4 soap_get_ns1__saveSignatureResponse(struct soap*, struct ns1__saveSignatureResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveSignatureResponse
#define soap_read_ns1__saveSignatureResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveSignatureResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveSignatureResponse * SOAP_FMAC2 soap_instantiate_ns1__saveSignatureResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveSignatureResponse * soap_new_ns1__saveSignatureResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveSignatureResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveSignatureResponse * soap_new_req_ns1__saveSignatureResponse(struct soap *soap, bool return_) { struct ns1__saveSignatureResponse *_p = soap_instantiate_ns1__saveSignatureResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveSignatureResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveSignatureResponse * soap_new_set_ns1__saveSignatureResponse(struct soap *soap, bool return_) { struct ns1__saveSignatureResponse *_p = soap_instantiate_ns1__saveSignatureResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveSignatureResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveSignatureResponse(struct soap *soap, struct ns1__saveSignatureResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveSignatureResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserOfficialClass
#define SOAP_TYPE_ns1__getUserOfficialClass (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserOfficialClass(struct soap*, struct ns1__getUserOfficialClass *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserOfficialClass(struct soap*, const struct ns1__getUserOfficialClass *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserOfficialClass(struct soap*, const char*, int, const struct ns1__getUserOfficialClass *, const char*);
SOAP_FMAC3 struct ns1__getUserOfficialClass * SOAP_FMAC4 soap_in_ns1__getUserOfficialClass(struct soap*, const char*, struct ns1__getUserOfficialClass *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserOfficialClass(struct soap*, const struct ns1__getUserOfficialClass *, const char*, const char*);

#ifndef soap_write_ns1__getUserOfficialClass
#define soap_write_ns1__getUserOfficialClass(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserOfficialClass(soap, data),0) || soap_put_ns1__getUserOfficialClass(soap, data, "ns1:getUserOfficialClass", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserOfficialClass * SOAP_FMAC4 soap_get_ns1__getUserOfficialClass(struct soap*, struct ns1__getUserOfficialClass *, const char*, const char*);

#ifndef soap_read_ns1__getUserOfficialClass
#define soap_read_ns1__getUserOfficialClass(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserOfficialClass(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserOfficialClass * SOAP_FMAC2 soap_instantiate_ns1__getUserOfficialClass(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserOfficialClass * soap_new_ns1__getUserOfficialClass(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserOfficialClass(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserOfficialClass * soap_new_req_ns1__getUserOfficialClass(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& date) { struct ns1__getUserOfficialClass *_p = soap_instantiate_ns1__getUserOfficialClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserOfficialClass(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->date = date; } return _p; }

inline struct ns1__getUserOfficialClass * soap_new_set_ns1__getUserOfficialClass(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& date) { struct ns1__getUserOfficialClass *_p = soap_instantiate_ns1__getUserOfficialClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserOfficialClass(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->date = date; } return _p; }

inline void soap_delete_ns1__getUserOfficialClass(struct soap *soap, struct ns1__getUserOfficialClass *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserOfficialClass(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserOfficialClassResponse
#define SOAP_TYPE_ns1__getUserOfficialClassResponse (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserOfficialClassResponse(struct soap*, struct ns1__getUserOfficialClassResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserOfficialClassResponse(struct soap*, const struct ns1__getUserOfficialClassResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserOfficialClassResponse(struct soap*, const char*, int, const struct ns1__getUserOfficialClassResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserOfficialClassResponse * SOAP_FMAC4 soap_in_ns1__getUserOfficialClassResponse(struct soap*, const char*, struct ns1__getUserOfficialClassResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserOfficialClassResponse(struct soap*, const struct ns1__getUserOfficialClassResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserOfficialClassResponse
#define soap_write_ns1__getUserOfficialClassResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserOfficialClassResponse(soap, data),0) || soap_put_ns1__getUserOfficialClassResponse(soap, data, "ns1:getUserOfficialClassResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserOfficialClassResponse * SOAP_FMAC4 soap_get_ns1__getUserOfficialClassResponse(struct soap*, struct ns1__getUserOfficialClassResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserOfficialClassResponse
#define soap_read_ns1__getUserOfficialClassResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserOfficialClassResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserOfficialClassResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserOfficialClassResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserOfficialClassResponse * soap_new_ns1__getUserOfficialClassResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserOfficialClassResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserOfficialClassResponse * soap_new_req_ns1__getUserOfficialClassResponse(struct soap *soap, std::string& return_) { struct ns1__getUserOfficialClassResponse *_p = soap_instantiate_ns1__getUserOfficialClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserOfficialClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getUserOfficialClassResponse * soap_new_set_ns1__getUserOfficialClassResponse(struct soap *soap, std::string& return_) { struct ns1__getUserOfficialClassResponse *_p = soap_instantiate_ns1__getUserOfficialClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserOfficialClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getUserOfficialClassResponse(struct soap *soap, struct ns1__getUserOfficialClassResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserOfficialClassResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetailsByUsername
#define SOAP_TYPE_ns1__getUserDetailsByUsername (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetailsByUsername(struct soap*, struct ns1__getUserDetailsByUsername *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetailsByUsername(struct soap*, const struct ns1__getUserDetailsByUsername *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetailsByUsername(struct soap*, const char*, int, const struct ns1__getUserDetailsByUsername *, const char*);
SOAP_FMAC3 struct ns1__getUserDetailsByUsername * SOAP_FMAC4 soap_in_ns1__getUserDetailsByUsername(struct soap*, const char*, struct ns1__getUserDetailsByUsername *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetailsByUsername(struct soap*, const struct ns1__getUserDetailsByUsername *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetailsByUsername
#define soap_write_ns1__getUserDetailsByUsername(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetailsByUsername(soap, data),0) || soap_put_ns1__getUserDetailsByUsername(soap, data, "ns1:getUserDetailsByUsername", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetailsByUsername * SOAP_FMAC4 soap_get_ns1__getUserDetailsByUsername(struct soap*, struct ns1__getUserDetailsByUsername *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetailsByUsername
#define soap_read_ns1__getUserDetailsByUsername(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetailsByUsername(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetailsByUsername * SOAP_FMAC2 soap_instantiate_ns1__getUserDetailsByUsername(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetailsByUsername * soap_new_ns1__getUserDetailsByUsername(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetailsByUsername(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetailsByUsername * soap_new_req_ns1__getUserDetailsByUsername(struct soap *soap, std::string& accesscode, std::string& username) { struct ns1__getUserDetailsByUsername *_p = soap_instantiate_ns1__getUserDetailsByUsername(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByUsername(soap, _p); _p->accesscode = accesscode; _p->username = username; } return _p; }

inline struct ns1__getUserDetailsByUsername * soap_new_set_ns1__getUserDetailsByUsername(struct soap *soap, std::string& accesscode, std::string& username) { struct ns1__getUserDetailsByUsername *_p = soap_instantiate_ns1__getUserDetailsByUsername(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByUsername(soap, _p); _p->accesscode = accesscode; _p->username = username; } return _p; }

inline void soap_delete_ns1__getUserDetailsByUsername(struct soap *soap, struct ns1__getUserDetailsByUsername *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetailsByUsername(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetailsByUsernameResponse
#define SOAP_TYPE_ns1__getUserDetailsByUsernameResponse (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetailsByUsernameResponse(struct soap*, struct ns1__getUserDetailsByUsernameResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetailsByUsernameResponse(struct soap*, const struct ns1__getUserDetailsByUsernameResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetailsByUsernameResponse(struct soap*, const char*, int, const struct ns1__getUserDetailsByUsernameResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserDetailsByUsernameResponse * SOAP_FMAC4 soap_in_ns1__getUserDetailsByUsernameResponse(struct soap*, const char*, struct ns1__getUserDetailsByUsernameResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetailsByUsernameResponse(struct soap*, const struct ns1__getUserDetailsByUsernameResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetailsByUsernameResponse
#define soap_write_ns1__getUserDetailsByUsernameResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetailsByUsernameResponse(soap, data),0) || soap_put_ns1__getUserDetailsByUsernameResponse(soap, data, "ns1:getUserDetailsByUsernameResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetailsByUsernameResponse * SOAP_FMAC4 soap_get_ns1__getUserDetailsByUsernameResponse(struct soap*, struct ns1__getUserDetailsByUsernameResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetailsByUsernameResponse
#define soap_read_ns1__getUserDetailsByUsernameResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetailsByUsernameResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetailsByUsernameResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserDetailsByUsernameResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetailsByUsernameResponse * soap_new_ns1__getUserDetailsByUsernameResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetailsByUsernameResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetailsByUsernameResponse * soap_new_req_ns1__getUserDetailsByUsernameResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsByUsernameResponse *_p = soap_instantiate_ns1__getUserDetailsByUsernameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByUsernameResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getUserDetailsByUsernameResponse * soap_new_set_ns1__getUserDetailsByUsernameResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsByUsernameResponse *_p = soap_instantiate_ns1__getUserDetailsByUsernameResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByUsernameResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getUserDetailsByUsernameResponse(struct soap *soap, struct ns1__getUserDetailsByUsernameResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetailsByUsernameResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetailsByNumber
#define SOAP_TYPE_ns1__getUserDetailsByNumber (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetailsByNumber(struct soap*, struct ns1__getUserDetailsByNumber *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetailsByNumber(struct soap*, const struct ns1__getUserDetailsByNumber *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetailsByNumber(struct soap*, const char*, int, const struct ns1__getUserDetailsByNumber *, const char*);
SOAP_FMAC3 struct ns1__getUserDetailsByNumber * SOAP_FMAC4 soap_in_ns1__getUserDetailsByNumber(struct soap*, const char*, struct ns1__getUserDetailsByNumber *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetailsByNumber(struct soap*, const struct ns1__getUserDetailsByNumber *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetailsByNumber
#define soap_write_ns1__getUserDetailsByNumber(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetailsByNumber(soap, data),0) || soap_put_ns1__getUserDetailsByNumber(soap, data, "ns1:getUserDetailsByNumber", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetailsByNumber * SOAP_FMAC4 soap_get_ns1__getUserDetailsByNumber(struct soap*, struct ns1__getUserDetailsByNumber *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetailsByNumber
#define soap_read_ns1__getUserDetailsByNumber(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetailsByNumber(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetailsByNumber * SOAP_FMAC2 soap_instantiate_ns1__getUserDetailsByNumber(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetailsByNumber * soap_new_ns1__getUserDetailsByNumber(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetailsByNumber(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetailsByNumber * soap_new_req_ns1__getUserDetailsByNumber(struct soap *soap, std::string& accesscode, std::string& number) { struct ns1__getUserDetailsByNumber *_p = soap_instantiate_ns1__getUserDetailsByNumber(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByNumber(soap, _p); _p->accesscode = accesscode; _p->number = number; } return _p; }

inline struct ns1__getUserDetailsByNumber * soap_new_set_ns1__getUserDetailsByNumber(struct soap *soap, std::string& accesscode, std::string& number) { struct ns1__getUserDetailsByNumber *_p = soap_instantiate_ns1__getUserDetailsByNumber(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByNumber(soap, _p); _p->accesscode = accesscode; _p->number = number; } return _p; }

inline void soap_delete_ns1__getUserDetailsByNumber(struct soap *soap, struct ns1__getUserDetailsByNumber *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetailsByNumber(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetailsByNumberResponse
#define SOAP_TYPE_ns1__getUserDetailsByNumberResponse (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetailsByNumberResponse(struct soap*, struct ns1__getUserDetailsByNumberResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetailsByNumberResponse(struct soap*, const struct ns1__getUserDetailsByNumberResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetailsByNumberResponse(struct soap*, const char*, int, const struct ns1__getUserDetailsByNumberResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserDetailsByNumberResponse * SOAP_FMAC4 soap_in_ns1__getUserDetailsByNumberResponse(struct soap*, const char*, struct ns1__getUserDetailsByNumberResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetailsByNumberResponse(struct soap*, const struct ns1__getUserDetailsByNumberResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetailsByNumberResponse
#define soap_write_ns1__getUserDetailsByNumberResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetailsByNumberResponse(soap, data),0) || soap_put_ns1__getUserDetailsByNumberResponse(soap, data, "ns1:getUserDetailsByNumberResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetailsByNumberResponse * SOAP_FMAC4 soap_get_ns1__getUserDetailsByNumberResponse(struct soap*, struct ns1__getUserDetailsByNumberResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetailsByNumberResponse
#define soap_read_ns1__getUserDetailsByNumberResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetailsByNumberResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetailsByNumberResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserDetailsByNumberResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetailsByNumberResponse * soap_new_ns1__getUserDetailsByNumberResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetailsByNumberResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetailsByNumberResponse * soap_new_req_ns1__getUserDetailsByNumberResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsByNumberResponse *_p = soap_instantiate_ns1__getUserDetailsByNumberResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByNumberResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getUserDetailsByNumberResponse * soap_new_set_ns1__getUserDetailsByNumberResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsByNumberResponse *_p = soap_instantiate_ns1__getUserDetailsByNumberResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsByNumberResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getUserDetailsByNumberResponse(struct soap *soap, struct ns1__getUserDetailsByNumberResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetailsByNumberResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetails
#define SOAP_TYPE_ns1__getUserDetails (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetails(struct soap*, struct ns1__getUserDetails *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetails(struct soap*, const struct ns1__getUserDetails *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetails(struct soap*, const char*, int, const struct ns1__getUserDetails *, const char*);
SOAP_FMAC3 struct ns1__getUserDetails * SOAP_FMAC4 soap_in_ns1__getUserDetails(struct soap*, const char*, struct ns1__getUserDetails *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetails(struct soap*, const struct ns1__getUserDetails *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetails
#define soap_write_ns1__getUserDetails(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetails(soap, data),0) || soap_put_ns1__getUserDetails(soap, data, "ns1:getUserDetails", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetails * SOAP_FMAC4 soap_get_ns1__getUserDetails(struct soap*, struct ns1__getUserDetails *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetails
#define soap_read_ns1__getUserDetails(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetails(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetails * SOAP_FMAC2 soap_instantiate_ns1__getUserDetails(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetails * soap_new_ns1__getUserDetails(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetails(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetails * soap_new_req_ns1__getUserDetails(struct soap *soap, std::string& accesscode, std::string& userIdentifier) { struct ns1__getUserDetails *_p = soap_instantiate_ns1__getUserDetails(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetails(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; } return _p; }

inline struct ns1__getUserDetails * soap_new_set_ns1__getUserDetails(struct soap *soap, std::string& accesscode, std::string& userIdentifier) { struct ns1__getUserDetails *_p = soap_instantiate_ns1__getUserDetails(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetails(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; } return _p; }

inline void soap_delete_ns1__getUserDetails(struct soap *soap, struct ns1__getUserDetails *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetails(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getUserDetailsResponse
#define SOAP_TYPE_ns1__getUserDetailsResponse (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getUserDetailsResponse(struct soap*, struct ns1__getUserDetailsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getUserDetailsResponse(struct soap*, const struct ns1__getUserDetailsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getUserDetailsResponse(struct soap*, const char*, int, const struct ns1__getUserDetailsResponse *, const char*);
SOAP_FMAC3 struct ns1__getUserDetailsResponse * SOAP_FMAC4 soap_in_ns1__getUserDetailsResponse(struct soap*, const char*, struct ns1__getUserDetailsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getUserDetailsResponse(struct soap*, const struct ns1__getUserDetailsResponse *, const char*, const char*);

#ifndef soap_write_ns1__getUserDetailsResponse
#define soap_write_ns1__getUserDetailsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getUserDetailsResponse(soap, data),0) || soap_put_ns1__getUserDetailsResponse(soap, data, "ns1:getUserDetailsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getUserDetailsResponse * SOAP_FMAC4 soap_get_ns1__getUserDetailsResponse(struct soap*, struct ns1__getUserDetailsResponse *, const char*, const char*);

#ifndef soap_read_ns1__getUserDetailsResponse
#define soap_read_ns1__getUserDetailsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getUserDetailsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getUserDetailsResponse * SOAP_FMAC2 soap_instantiate_ns1__getUserDetailsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getUserDetailsResponse * soap_new_ns1__getUserDetailsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getUserDetailsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getUserDetailsResponse * soap_new_req_ns1__getUserDetailsResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsResponse *_p = soap_instantiate_ns1__getUserDetailsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getUserDetailsResponse * soap_new_set_ns1__getUserDetailsResponse(struct soap *soap, std::string& return_) { struct ns1__getUserDetailsResponse *_p = soap_instantiate_ns1__getUserDetailsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getUserDetailsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getUserDetailsResponse(struct soap *soap, struct ns1__getUserDetailsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getUserDetailsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAbsents
#define SOAP_TYPE_ns1__getAbsents (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAbsents(struct soap*, struct ns1__getAbsents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAbsents(struct soap*, const struct ns1__getAbsents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAbsents(struct soap*, const char*, int, const struct ns1__getAbsents *, const char*);
SOAP_FMAC3 struct ns1__getAbsents * SOAP_FMAC4 soap_in_ns1__getAbsents(struct soap*, const char*, struct ns1__getAbsents *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAbsents(struct soap*, const struct ns1__getAbsents *, const char*, const char*);

#ifndef soap_write_ns1__getAbsents
#define soap_write_ns1__getAbsents(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAbsents(soap, data),0) || soap_put_ns1__getAbsents(soap, data, "ns1:getAbsents", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAbsents * SOAP_FMAC4 soap_get_ns1__getAbsents(struct soap*, struct ns1__getAbsents *, const char*, const char*);

#ifndef soap_read_ns1__getAbsents
#define soap_read_ns1__getAbsents(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAbsents(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAbsents * SOAP_FMAC2 soap_instantiate_ns1__getAbsents(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAbsents * soap_new_ns1__getAbsents(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAbsents(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAbsents * soap_new_req_ns1__getAbsents(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& schoolYear) { struct ns1__getAbsents *_p = soap_instantiate_ns1__getAbsents(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsents(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->schoolYear = schoolYear; } return _p; }

inline struct ns1__getAbsents * soap_new_set_ns1__getAbsents(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& schoolYear) { struct ns1__getAbsents *_p = soap_instantiate_ns1__getAbsents(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsents(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->schoolYear = schoolYear; } return _p; }

inline void soap_delete_ns1__getAbsents(struct soap *soap, struct ns1__getAbsents *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAbsents(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAbsentsResponse
#define SOAP_TYPE_ns1__getAbsentsResponse (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAbsentsResponse(struct soap*, struct ns1__getAbsentsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAbsentsResponse(struct soap*, const struct ns1__getAbsentsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAbsentsResponse(struct soap*, const char*, int, const struct ns1__getAbsentsResponse *, const char*);
SOAP_FMAC3 struct ns1__getAbsentsResponse * SOAP_FMAC4 soap_in_ns1__getAbsentsResponse(struct soap*, const char*, struct ns1__getAbsentsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAbsentsResponse(struct soap*, const struct ns1__getAbsentsResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAbsentsResponse
#define soap_write_ns1__getAbsentsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAbsentsResponse(soap, data),0) || soap_put_ns1__getAbsentsResponse(soap, data, "ns1:getAbsentsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAbsentsResponse * SOAP_FMAC4 soap_get_ns1__getAbsentsResponse(struct soap*, struct ns1__getAbsentsResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAbsentsResponse
#define soap_read_ns1__getAbsentsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAbsentsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAbsentsResponse * SOAP_FMAC2 soap_instantiate_ns1__getAbsentsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAbsentsResponse * soap_new_ns1__getAbsentsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAbsentsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAbsentsResponse * soap_new_req_ns1__getAbsentsResponse(struct soap *soap, std::string& return_) { struct ns1__getAbsentsResponse *_p = soap_instantiate_ns1__getAbsentsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getAbsentsResponse * soap_new_set_ns1__getAbsentsResponse(struct soap *soap, std::string& return_) { struct ns1__getAbsentsResponse *_p = soap_instantiate_ns1__getAbsentsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getAbsentsResponse(struct soap *soap, struct ns1__getAbsentsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAbsentsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAbsentsByDate
#define SOAP_TYPE_ns1__getAbsentsByDate (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAbsentsByDate(struct soap*, struct ns1__getAbsentsByDate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAbsentsByDate(struct soap*, const struct ns1__getAbsentsByDate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAbsentsByDate(struct soap*, const char*, int, const struct ns1__getAbsentsByDate *, const char*);
SOAP_FMAC3 struct ns1__getAbsentsByDate * SOAP_FMAC4 soap_in_ns1__getAbsentsByDate(struct soap*, const char*, struct ns1__getAbsentsByDate *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAbsentsByDate(struct soap*, const struct ns1__getAbsentsByDate *, const char*, const char*);

#ifndef soap_write_ns1__getAbsentsByDate
#define soap_write_ns1__getAbsentsByDate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAbsentsByDate(soap, data),0) || soap_put_ns1__getAbsentsByDate(soap, data, "ns1:getAbsentsByDate", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAbsentsByDate * SOAP_FMAC4 soap_get_ns1__getAbsentsByDate(struct soap*, struct ns1__getAbsentsByDate *, const char*, const char*);

#ifndef soap_read_ns1__getAbsentsByDate
#define soap_read_ns1__getAbsentsByDate(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAbsentsByDate(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAbsentsByDate * SOAP_FMAC2 soap_instantiate_ns1__getAbsentsByDate(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAbsentsByDate * soap_new_ns1__getAbsentsByDate(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAbsentsByDate(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAbsentsByDate * soap_new_req_ns1__getAbsentsByDate(struct soap *soap, std::string& accesscode, std::string& date) { struct ns1__getAbsentsByDate *_p = soap_instantiate_ns1__getAbsentsByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsByDate(soap, _p); _p->accesscode = accesscode; _p->date = date; } return _p; }

inline struct ns1__getAbsentsByDate * soap_new_set_ns1__getAbsentsByDate(struct soap *soap, std::string& accesscode, std::string& date) { struct ns1__getAbsentsByDate *_p = soap_instantiate_ns1__getAbsentsByDate(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsByDate(soap, _p); _p->accesscode = accesscode; _p->date = date; } return _p; }

inline void soap_delete_ns1__getAbsentsByDate(struct soap *soap, struct ns1__getAbsentsByDate *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAbsentsByDate(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAbsentsByDateResponse
#define SOAP_TYPE_ns1__getAbsentsByDateResponse (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAbsentsByDateResponse(struct soap*, struct ns1__getAbsentsByDateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAbsentsByDateResponse(struct soap*, const struct ns1__getAbsentsByDateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAbsentsByDateResponse(struct soap*, const char*, int, const struct ns1__getAbsentsByDateResponse *, const char*);
SOAP_FMAC3 struct ns1__getAbsentsByDateResponse * SOAP_FMAC4 soap_in_ns1__getAbsentsByDateResponse(struct soap*, const char*, struct ns1__getAbsentsByDateResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAbsentsByDateResponse(struct soap*, const struct ns1__getAbsentsByDateResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAbsentsByDateResponse
#define soap_write_ns1__getAbsentsByDateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAbsentsByDateResponse(soap, data),0) || soap_put_ns1__getAbsentsByDateResponse(soap, data, "ns1:getAbsentsByDateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAbsentsByDateResponse * SOAP_FMAC4 soap_get_ns1__getAbsentsByDateResponse(struct soap*, struct ns1__getAbsentsByDateResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAbsentsByDateResponse
#define soap_read_ns1__getAbsentsByDateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAbsentsByDateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAbsentsByDateResponse * SOAP_FMAC2 soap_instantiate_ns1__getAbsentsByDateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAbsentsByDateResponse * soap_new_ns1__getAbsentsByDateResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAbsentsByDateResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAbsentsByDateResponse * soap_new_req_ns1__getAbsentsByDateResponse(struct soap *soap, std::string& return_) { struct ns1__getAbsentsByDateResponse *_p = soap_instantiate_ns1__getAbsentsByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsByDateResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getAbsentsByDateResponse * soap_new_set_ns1__getAbsentsByDateResponse(struct soap *soap, std::string& return_) { struct ns1__getAbsentsByDateResponse *_p = soap_instantiate_ns1__getAbsentsByDateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAbsentsByDateResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getAbsentsByDateResponse(struct soap *soap, struct ns1__getAbsentsByDateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAbsentsByDateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__isValidUserCredentials
#define SOAP_TYPE_ns1__isValidUserCredentials (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__isValidUserCredentials(struct soap*, struct ns1__isValidUserCredentials *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__isValidUserCredentials(struct soap*, const struct ns1__isValidUserCredentials *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__isValidUserCredentials(struct soap*, const char*, int, const struct ns1__isValidUserCredentials *, const char*);
SOAP_FMAC3 struct ns1__isValidUserCredentials * SOAP_FMAC4 soap_in_ns1__isValidUserCredentials(struct soap*, const char*, struct ns1__isValidUserCredentials *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__isValidUserCredentials(struct soap*, const struct ns1__isValidUserCredentials *, const char*, const char*);

#ifndef soap_write_ns1__isValidUserCredentials
#define soap_write_ns1__isValidUserCredentials(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__isValidUserCredentials(soap, data),0) || soap_put_ns1__isValidUserCredentials(soap, data, "ns1:isValidUserCredentials", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__isValidUserCredentials * SOAP_FMAC4 soap_get_ns1__isValidUserCredentials(struct soap*, struct ns1__isValidUserCredentials *, const char*, const char*);

#ifndef soap_read_ns1__isValidUserCredentials
#define soap_read_ns1__isValidUserCredentials(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__isValidUserCredentials(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__isValidUserCredentials * SOAP_FMAC2 soap_instantiate_ns1__isValidUserCredentials(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__isValidUserCredentials * soap_new_ns1__isValidUserCredentials(struct soap *soap, int n = -1) { return soap_instantiate_ns1__isValidUserCredentials(soap, n, NULL, NULL, NULL); }

inline struct ns1__isValidUserCredentials * soap_new_req_ns1__isValidUserCredentials(struct soap *soap, std::string& accesscode, std::string& username, std::string& password) { struct ns1__isValidUserCredentials *_p = soap_instantiate_ns1__isValidUserCredentials(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__isValidUserCredentials(soap, _p); _p->accesscode = accesscode; _p->username = username; _p->password = password; } return _p; }

inline struct ns1__isValidUserCredentials * soap_new_set_ns1__isValidUserCredentials(struct soap *soap, std::string& accesscode, std::string& username, std::string& password) { struct ns1__isValidUserCredentials *_p = soap_instantiate_ns1__isValidUserCredentials(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__isValidUserCredentials(soap, _p); _p->accesscode = accesscode; _p->username = username; _p->password = password; } return _p; }

inline void soap_delete_ns1__isValidUserCredentials(struct soap *soap, struct ns1__isValidUserCredentials *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isValidUserCredentials(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__isValidUserCredentialsResponse
#define SOAP_TYPE_ns1__isValidUserCredentialsResponse (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__isValidUserCredentialsResponse(struct soap*, struct ns1__isValidUserCredentialsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__isValidUserCredentialsResponse(struct soap*, const struct ns1__isValidUserCredentialsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__isValidUserCredentialsResponse(struct soap*, const char*, int, const struct ns1__isValidUserCredentialsResponse *, const char*);
SOAP_FMAC3 struct ns1__isValidUserCredentialsResponse * SOAP_FMAC4 soap_in_ns1__isValidUserCredentialsResponse(struct soap*, const char*, struct ns1__isValidUserCredentialsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__isValidUserCredentialsResponse(struct soap*, const struct ns1__isValidUserCredentialsResponse *, const char*, const char*);

#ifndef soap_write_ns1__isValidUserCredentialsResponse
#define soap_write_ns1__isValidUserCredentialsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__isValidUserCredentialsResponse(soap, data),0) || soap_put_ns1__isValidUserCredentialsResponse(soap, data, "ns1:isValidUserCredentialsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__isValidUserCredentialsResponse * SOAP_FMAC4 soap_get_ns1__isValidUserCredentialsResponse(struct soap*, struct ns1__isValidUserCredentialsResponse *, const char*, const char*);

#ifndef soap_read_ns1__isValidUserCredentialsResponse
#define soap_read_ns1__isValidUserCredentialsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__isValidUserCredentialsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__isValidUserCredentialsResponse * SOAP_FMAC2 soap_instantiate_ns1__isValidUserCredentialsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__isValidUserCredentialsResponse * soap_new_ns1__isValidUserCredentialsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__isValidUserCredentialsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__isValidUserCredentialsResponse * soap_new_req_ns1__isValidUserCredentialsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__isValidUserCredentialsResponse *_p = soap_instantiate_ns1__isValidUserCredentialsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__isValidUserCredentialsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__isValidUserCredentialsResponse * soap_new_set_ns1__isValidUserCredentialsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__isValidUserCredentialsResponse *_p = soap_instantiate_ns1__isValidUserCredentialsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__isValidUserCredentialsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__isValidUserCredentialsResponse(struct soap *soap, struct ns1__isValidUserCredentialsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__isValidUserCredentialsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassTeachers
#define SOAP_TYPE_ns1__getClassTeachers (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassTeachers(struct soap*, struct ns1__getClassTeachers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassTeachers(struct soap*, const struct ns1__getClassTeachers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassTeachers(struct soap*, const char*, int, const struct ns1__getClassTeachers *, const char*);
SOAP_FMAC3 struct ns1__getClassTeachers * SOAP_FMAC4 soap_in_ns1__getClassTeachers(struct soap*, const char*, struct ns1__getClassTeachers *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassTeachers(struct soap*, const struct ns1__getClassTeachers *, const char*, const char*);

#ifndef soap_write_ns1__getClassTeachers
#define soap_write_ns1__getClassTeachers(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassTeachers(soap, data),0) || soap_put_ns1__getClassTeachers(soap, data, "ns1:getClassTeachers", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassTeachers * SOAP_FMAC4 soap_get_ns1__getClassTeachers(struct soap*, struct ns1__getClassTeachers *, const char*, const char*);

#ifndef soap_read_ns1__getClassTeachers
#define soap_read_ns1__getClassTeachers(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassTeachers(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassTeachers * SOAP_FMAC2 soap_instantiate_ns1__getClassTeachers(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassTeachers * soap_new_ns1__getClassTeachers(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassTeachers(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassTeachers * soap_new_req_ns1__getClassTeachers(struct soap *soap, std::string& accesscode, bool getAllOwners) { struct ns1__getClassTeachers *_p = soap_instantiate_ns1__getClassTeachers(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassTeachers(soap, _p); _p->accesscode = accesscode; _p->getAllOwners = getAllOwners; } return _p; }

inline struct ns1__getClassTeachers * soap_new_set_ns1__getClassTeachers(struct soap *soap, std::string& accesscode, bool getAllOwners) { struct ns1__getClassTeachers *_p = soap_instantiate_ns1__getClassTeachers(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassTeachers(soap, _p); _p->accesscode = accesscode; _p->getAllOwners = getAllOwners; } return _p; }

inline void soap_delete_ns1__getClassTeachers(struct soap *soap, struct ns1__getClassTeachers *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassTeachers(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassTeachersResponse
#define SOAP_TYPE_ns1__getClassTeachersResponse (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassTeachersResponse(struct soap*, struct ns1__getClassTeachersResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassTeachersResponse(struct soap*, const struct ns1__getClassTeachersResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassTeachersResponse(struct soap*, const char*, int, const struct ns1__getClassTeachersResponse *, const char*);
SOAP_FMAC3 struct ns1__getClassTeachersResponse * SOAP_FMAC4 soap_in_ns1__getClassTeachersResponse(struct soap*, const char*, struct ns1__getClassTeachersResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassTeachersResponse(struct soap*, const struct ns1__getClassTeachersResponse *, const char*, const char*);

#ifndef soap_write_ns1__getClassTeachersResponse
#define soap_write_ns1__getClassTeachersResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassTeachersResponse(soap, data),0) || soap_put_ns1__getClassTeachersResponse(soap, data, "ns1:getClassTeachersResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassTeachersResponse * SOAP_FMAC4 soap_get_ns1__getClassTeachersResponse(struct soap*, struct ns1__getClassTeachersResponse *, const char*, const char*);

#ifndef soap_read_ns1__getClassTeachersResponse
#define soap_read_ns1__getClassTeachersResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassTeachersResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassTeachersResponse * SOAP_FMAC2 soap_instantiate_ns1__getClassTeachersResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassTeachersResponse * soap_new_ns1__getClassTeachersResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassTeachersResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassTeachersResponse * soap_new_req_ns1__getClassTeachersResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getClassTeachersResponse *_p = soap_instantiate_ns1__getClassTeachersResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassTeachersResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getClassTeachersResponse * soap_new_set_ns1__getClassTeachersResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getClassTeachersResponse *_p = soap_instantiate_ns1__getClassTeachersResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassTeachersResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getClassTeachersResponse(struct soap *soap, struct ns1__getClassTeachersResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassTeachersResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__unregisterStudent
#define SOAP_TYPE_ns1__unregisterStudent (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unregisterStudent(struct soap*, struct ns1__unregisterStudent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unregisterStudent(struct soap*, const struct ns1__unregisterStudent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unregisterStudent(struct soap*, const char*, int, const struct ns1__unregisterStudent *, const char*);
SOAP_FMAC3 struct ns1__unregisterStudent * SOAP_FMAC4 soap_in_ns1__unregisterStudent(struct soap*, const char*, struct ns1__unregisterStudent *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unregisterStudent(struct soap*, const struct ns1__unregisterStudent *, const char*, const char*);

#ifndef soap_write_ns1__unregisterStudent
#define soap_write_ns1__unregisterStudent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__unregisterStudent(soap, data),0) || soap_put_ns1__unregisterStudent(soap, data, "ns1:unregisterStudent", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__unregisterStudent * SOAP_FMAC4 soap_get_ns1__unregisterStudent(struct soap*, struct ns1__unregisterStudent *, const char*, const char*);

#ifndef soap_read_ns1__unregisterStudent
#define soap_read_ns1__unregisterStudent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__unregisterStudent(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__unregisterStudent * SOAP_FMAC2 soap_instantiate_ns1__unregisterStudent(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__unregisterStudent * soap_new_ns1__unregisterStudent(struct soap *soap, int n = -1) { return soap_instantiate_ns1__unregisterStudent(soap, n, NULL, NULL, NULL); }

inline struct ns1__unregisterStudent * soap_new_req_ns1__unregisterStudent(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& officialDate) { struct ns1__unregisterStudent *_p = soap_instantiate_ns1__unregisterStudent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__unregisterStudent(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->officialDate = officialDate; } return _p; }

inline struct ns1__unregisterStudent * soap_new_set_ns1__unregisterStudent(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& officialDate) { struct ns1__unregisterStudent *_p = soap_instantiate_ns1__unregisterStudent(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__unregisterStudent(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->officialDate = officialDate; } return _p; }

inline void soap_delete_ns1__unregisterStudent(struct soap *soap, struct ns1__unregisterStudent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__unregisterStudent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__unregisterStudentResponse
#define SOAP_TYPE_ns1__unregisterStudentResponse (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__unregisterStudentResponse(struct soap*, struct ns1__unregisterStudentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__unregisterStudentResponse(struct soap*, const struct ns1__unregisterStudentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__unregisterStudentResponse(struct soap*, const char*, int, const struct ns1__unregisterStudentResponse *, const char*);
SOAP_FMAC3 struct ns1__unregisterStudentResponse * SOAP_FMAC4 soap_in_ns1__unregisterStudentResponse(struct soap*, const char*, struct ns1__unregisterStudentResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__unregisterStudentResponse(struct soap*, const struct ns1__unregisterStudentResponse *, const char*, const char*);

#ifndef soap_write_ns1__unregisterStudentResponse
#define soap_write_ns1__unregisterStudentResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__unregisterStudentResponse(soap, data),0) || soap_put_ns1__unregisterStudentResponse(soap, data, "ns1:unregisterStudentResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__unregisterStudentResponse * SOAP_FMAC4 soap_get_ns1__unregisterStudentResponse(struct soap*, struct ns1__unregisterStudentResponse *, const char*, const char*);

#ifndef soap_read_ns1__unregisterStudentResponse
#define soap_read_ns1__unregisterStudentResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__unregisterStudentResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__unregisterStudentResponse * SOAP_FMAC2 soap_instantiate_ns1__unregisterStudentResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__unregisterStudentResponse * soap_new_ns1__unregisterStudentResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__unregisterStudentResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__unregisterStudentResponse * soap_new_req_ns1__unregisterStudentResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__unregisterStudentResponse *_p = soap_instantiate_ns1__unregisterStudentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__unregisterStudentResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__unregisterStudentResponse * soap_new_set_ns1__unregisterStudentResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__unregisterStudentResponse *_p = soap_instantiate_ns1__unregisterStudentResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__unregisterStudentResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__unregisterStudentResponse(struct soap *soap, struct ns1__unregisterStudentResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__unregisterStudentResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getSkoreClassTeacherCourseRelation
#define SOAP_TYPE_ns1__getSkoreClassTeacherCourseRelation (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getSkoreClassTeacherCourseRelation(struct soap*, struct ns1__getSkoreClassTeacherCourseRelation *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getSkoreClassTeacherCourseRelation(struct soap*, const struct ns1__getSkoreClassTeacherCourseRelation *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSkoreClassTeacherCourseRelation(struct soap*, const char*, int, const struct ns1__getSkoreClassTeacherCourseRelation *, const char*);
SOAP_FMAC3 struct ns1__getSkoreClassTeacherCourseRelation * SOAP_FMAC4 soap_in_ns1__getSkoreClassTeacherCourseRelation(struct soap*, const char*, struct ns1__getSkoreClassTeacherCourseRelation *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getSkoreClassTeacherCourseRelation(struct soap*, const struct ns1__getSkoreClassTeacherCourseRelation *, const char*, const char*);

#ifndef soap_write_ns1__getSkoreClassTeacherCourseRelation
#define soap_write_ns1__getSkoreClassTeacherCourseRelation(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getSkoreClassTeacherCourseRelation(soap, data),0) || soap_put_ns1__getSkoreClassTeacherCourseRelation(soap, data, "ns1:getSkoreClassTeacherCourseRelation", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getSkoreClassTeacherCourseRelation * SOAP_FMAC4 soap_get_ns1__getSkoreClassTeacherCourseRelation(struct soap*, struct ns1__getSkoreClassTeacherCourseRelation *, const char*, const char*);

#ifndef soap_read_ns1__getSkoreClassTeacherCourseRelation
#define soap_read_ns1__getSkoreClassTeacherCourseRelation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getSkoreClassTeacherCourseRelation(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getSkoreClassTeacherCourseRelation * SOAP_FMAC2 soap_instantiate_ns1__getSkoreClassTeacherCourseRelation(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getSkoreClassTeacherCourseRelation * soap_new_ns1__getSkoreClassTeacherCourseRelation(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getSkoreClassTeacherCourseRelation(soap, n, NULL, NULL, NULL); }

inline struct ns1__getSkoreClassTeacherCourseRelation * soap_new_req_ns1__getSkoreClassTeacherCourseRelation(struct soap *soap, std::string& accesscode) { struct ns1__getSkoreClassTeacherCourseRelation *_p = soap_instantiate_ns1__getSkoreClassTeacherCourseRelation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getSkoreClassTeacherCourseRelation(soap, _p); _p->accesscode = accesscode; } return _p; }

inline struct ns1__getSkoreClassTeacherCourseRelation * soap_new_set_ns1__getSkoreClassTeacherCourseRelation(struct soap *soap, std::string& accesscode) { struct ns1__getSkoreClassTeacherCourseRelation *_p = soap_instantiate_ns1__getSkoreClassTeacherCourseRelation(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getSkoreClassTeacherCourseRelation(soap, _p); _p->accesscode = accesscode; } return _p; }

inline void soap_delete_ns1__getSkoreClassTeacherCourseRelation(struct soap *soap, struct ns1__getSkoreClassTeacherCourseRelation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getSkoreClassTeacherCourseRelation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getSkoreClassTeacherCourseRelationResponse
#define SOAP_TYPE_ns1__getSkoreClassTeacherCourseRelationResponse (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, struct ns1__getSkoreClassTeacherCourseRelationResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, const struct ns1__getSkoreClassTeacherCourseRelationResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, const char*, int, const struct ns1__getSkoreClassTeacherCourseRelationResponse *, const char*);
SOAP_FMAC3 struct ns1__getSkoreClassTeacherCourseRelationResponse * SOAP_FMAC4 soap_in_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, const char*, struct ns1__getSkoreClassTeacherCourseRelationResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, const struct ns1__getSkoreClassTeacherCourseRelationResponse *, const char*, const char*);

#ifndef soap_write_ns1__getSkoreClassTeacherCourseRelationResponse
#define soap_write_ns1__getSkoreClassTeacherCourseRelationResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getSkoreClassTeacherCourseRelationResponse(soap, data),0) || soap_put_ns1__getSkoreClassTeacherCourseRelationResponse(soap, data, "ns1:getSkoreClassTeacherCourseRelationResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getSkoreClassTeacherCourseRelationResponse * SOAP_FMAC4 soap_get_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, struct ns1__getSkoreClassTeacherCourseRelationResponse *, const char*, const char*);

#ifndef soap_read_ns1__getSkoreClassTeacherCourseRelationResponse
#define soap_read_ns1__getSkoreClassTeacherCourseRelationResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getSkoreClassTeacherCourseRelationResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getSkoreClassTeacherCourseRelationResponse * SOAP_FMAC2 soap_instantiate_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getSkoreClassTeacherCourseRelationResponse * soap_new_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getSkoreClassTeacherCourseRelationResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getSkoreClassTeacherCourseRelationResponse * soap_new_req_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getSkoreClassTeacherCourseRelationResponse *_p = soap_instantiate_ns1__getSkoreClassTeacherCourseRelationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getSkoreClassTeacherCourseRelationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getSkoreClassTeacherCourseRelationResponse * soap_new_set_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getSkoreClassTeacherCourseRelationResponse *_p = soap_instantiate_ns1__getSkoreClassTeacherCourseRelationResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getSkoreClassTeacherCourseRelationResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap *soap, struct ns1__getSkoreClassTeacherCourseRelationResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getSkoreClassTeacherCourseRelationResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sendMsg
#define SOAP_TYPE_ns1__sendMsg (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendMsg(struct soap*, struct ns1__sendMsg *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendMsg(struct soap*, const struct ns1__sendMsg *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendMsg(struct soap*, const char*, int, const struct ns1__sendMsg *, const char*);
SOAP_FMAC3 struct ns1__sendMsg * SOAP_FMAC4 soap_in_ns1__sendMsg(struct soap*, const char*, struct ns1__sendMsg *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendMsg(struct soap*, const struct ns1__sendMsg *, const char*, const char*);

#ifndef soap_write_ns1__sendMsg
#define soap_write_ns1__sendMsg(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendMsg(soap, data),0) || soap_put_ns1__sendMsg(soap, data, "ns1:sendMsg", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendMsg * SOAP_FMAC4 soap_get_ns1__sendMsg(struct soap*, struct ns1__sendMsg *, const char*, const char*);

#ifndef soap_read_ns1__sendMsg
#define soap_read_ns1__sendMsg(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sendMsg(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__sendMsg * SOAP_FMAC2 soap_instantiate_ns1__sendMsg(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendMsg * soap_new_ns1__sendMsg(struct soap *soap, int n = -1) { return soap_instantiate_ns1__sendMsg(soap, n, NULL, NULL, NULL); }

inline struct ns1__sendMsg * soap_new_req_ns1__sendMsg(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& title, std::string& body, std::string& senderIdentifier, struct soap_dom_element& attachments, int coaccount) { struct ns1__sendMsg *_p = soap_instantiate_ns1__sendMsg(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__sendMsg(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->title = title; _p->body = body; _p->senderIdentifier = senderIdentifier; _p->attachments = attachments; _p->coaccount = coaccount; } return _p; }

inline struct ns1__sendMsg * soap_new_set_ns1__sendMsg(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& title, std::string& body, std::string& senderIdentifier, struct soap_dom_element& attachments, int coaccount) { struct ns1__sendMsg *_p = soap_instantiate_ns1__sendMsg(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__sendMsg(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->title = title; _p->body = body; _p->senderIdentifier = senderIdentifier; _p->attachments = attachments; _p->coaccount = coaccount; } return _p; }

inline void soap_delete_ns1__sendMsg(struct soap *soap, struct ns1__sendMsg *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sendMsg(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__sendMsgResponse
#define SOAP_TYPE_ns1__sendMsgResponse (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendMsgResponse(struct soap*, struct ns1__sendMsgResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendMsgResponse(struct soap*, const struct ns1__sendMsgResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendMsgResponse(struct soap*, const char*, int, const struct ns1__sendMsgResponse *, const char*);
SOAP_FMAC3 struct ns1__sendMsgResponse * SOAP_FMAC4 soap_in_ns1__sendMsgResponse(struct soap*, const char*, struct ns1__sendMsgResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendMsgResponse(struct soap*, const struct ns1__sendMsgResponse *, const char*, const char*);

#ifndef soap_write_ns1__sendMsgResponse
#define soap_write_ns1__sendMsgResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendMsgResponse(soap, data),0) || soap_put_ns1__sendMsgResponse(soap, data, "ns1:sendMsgResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendMsgResponse * SOAP_FMAC4 soap_get_ns1__sendMsgResponse(struct soap*, struct ns1__sendMsgResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendMsgResponse
#define soap_read_ns1__sendMsgResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__sendMsgResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__sendMsgResponse * SOAP_FMAC2 soap_instantiate_ns1__sendMsgResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__sendMsgResponse * soap_new_ns1__sendMsgResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__sendMsgResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__sendMsgResponse * soap_new_req_ns1__sendMsgResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__sendMsgResponse *_p = soap_instantiate_ns1__sendMsgResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__sendMsgResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__sendMsgResponse * soap_new_set_ns1__sendMsgResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__sendMsgResponse *_p = soap_instantiate_ns1__sendMsgResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__sendMsgResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__sendMsgResponse(struct soap *soap, struct ns1__sendMsgResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__sendMsgResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__savePassword
#define SOAP_TYPE_ns1__savePassword (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__savePassword(struct soap*, struct ns1__savePassword *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__savePassword(struct soap*, const struct ns1__savePassword *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__savePassword(struct soap*, const char*, int, const struct ns1__savePassword *, const char*);
SOAP_FMAC3 struct ns1__savePassword * SOAP_FMAC4 soap_in_ns1__savePassword(struct soap*, const char*, struct ns1__savePassword *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__savePassword(struct soap*, const struct ns1__savePassword *, const char*, const char*);

#ifndef soap_write_ns1__savePassword
#define soap_write_ns1__savePassword(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__savePassword(soap, data),0) || soap_put_ns1__savePassword(soap, data, "ns1:savePassword", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__savePassword * SOAP_FMAC4 soap_get_ns1__savePassword(struct soap*, struct ns1__savePassword *, const char*, const char*);

#ifndef soap_read_ns1__savePassword
#define soap_read_ns1__savePassword(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__savePassword(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__savePassword * SOAP_FMAC2 soap_instantiate_ns1__savePassword(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__savePassword * soap_new_ns1__savePassword(struct soap *soap, int n = -1) { return soap_instantiate_ns1__savePassword(soap, n, NULL, NULL, NULL); }

inline struct ns1__savePassword * soap_new_req_ns1__savePassword(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& password, int accountType) { struct ns1__savePassword *_p = soap_instantiate_ns1__savePassword(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__savePassword(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->password = password; _p->accountType = accountType; } return _p; }

inline struct ns1__savePassword * soap_new_set_ns1__savePassword(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& password, int accountType) { struct ns1__savePassword *_p = soap_instantiate_ns1__savePassword(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__savePassword(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->password = password; _p->accountType = accountType; } return _p; }

inline void soap_delete_ns1__savePassword(struct soap *soap, struct ns1__savePassword *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__savePassword(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__savePasswordResponse
#define SOAP_TYPE_ns1__savePasswordResponse (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__savePasswordResponse(struct soap*, struct ns1__savePasswordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__savePasswordResponse(struct soap*, const struct ns1__savePasswordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__savePasswordResponse(struct soap*, const char*, int, const struct ns1__savePasswordResponse *, const char*);
SOAP_FMAC3 struct ns1__savePasswordResponse * SOAP_FMAC4 soap_in_ns1__savePasswordResponse(struct soap*, const char*, struct ns1__savePasswordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__savePasswordResponse(struct soap*, const struct ns1__savePasswordResponse *, const char*, const char*);

#ifndef soap_write_ns1__savePasswordResponse
#define soap_write_ns1__savePasswordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__savePasswordResponse(soap, data),0) || soap_put_ns1__savePasswordResponse(soap, data, "ns1:savePasswordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__savePasswordResponse * SOAP_FMAC4 soap_get_ns1__savePasswordResponse(struct soap*, struct ns1__savePasswordResponse *, const char*, const char*);

#ifndef soap_read_ns1__savePasswordResponse
#define soap_read_ns1__savePasswordResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__savePasswordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__savePasswordResponse * SOAP_FMAC2 soap_instantiate_ns1__savePasswordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__savePasswordResponse * soap_new_ns1__savePasswordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__savePasswordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__savePasswordResponse * soap_new_req_ns1__savePasswordResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__savePasswordResponse *_p = soap_instantiate_ns1__savePasswordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__savePasswordResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__savePasswordResponse * soap_new_set_ns1__savePasswordResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__savePasswordResponse *_p = soap_instantiate_ns1__savePasswordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__savePasswordResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__savePasswordResponse(struct soap *soap, struct ns1__savePasswordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__savePasswordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__replaceInum
#define SOAP_TYPE_ns1__replaceInum (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__replaceInum(struct soap*, struct ns1__replaceInum *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__replaceInum(struct soap*, const struct ns1__replaceInum *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__replaceInum(struct soap*, const char*, int, const struct ns1__replaceInum *, const char*);
SOAP_FMAC3 struct ns1__replaceInum * SOAP_FMAC4 soap_in_ns1__replaceInum(struct soap*, const char*, struct ns1__replaceInum *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__replaceInum(struct soap*, const struct ns1__replaceInum *, const char*, const char*);

#ifndef soap_write_ns1__replaceInum
#define soap_write_ns1__replaceInum(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__replaceInum(soap, data),0) || soap_put_ns1__replaceInum(soap, data, "ns1:replaceInum", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__replaceInum * SOAP_FMAC4 soap_get_ns1__replaceInum(struct soap*, struct ns1__replaceInum *, const char*, const char*);

#ifndef soap_read_ns1__replaceInum
#define soap_read_ns1__replaceInum(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__replaceInum(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__replaceInum * SOAP_FMAC2 soap_instantiate_ns1__replaceInum(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__replaceInum * soap_new_ns1__replaceInum(struct soap *soap, int n = -1) { return soap_instantiate_ns1__replaceInum(soap, n, NULL, NULL, NULL); }

inline struct ns1__replaceInum * soap_new_req_ns1__replaceInum(struct soap *soap, std::string& accesscode, std::string& oldInum, std::string& newInum) { struct ns1__replaceInum *_p = soap_instantiate_ns1__replaceInum(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__replaceInum(soap, _p); _p->accesscode = accesscode; _p->oldInum = oldInum; _p->newInum = newInum; } return _p; }

inline struct ns1__replaceInum * soap_new_set_ns1__replaceInum(struct soap *soap, std::string& accesscode, std::string& oldInum, std::string& newInum) { struct ns1__replaceInum *_p = soap_instantiate_ns1__replaceInum(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__replaceInum(soap, _p); _p->accesscode = accesscode; _p->oldInum = oldInum; _p->newInum = newInum; } return _p; }

inline void soap_delete_ns1__replaceInum(struct soap *soap, struct ns1__replaceInum *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__replaceInum(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__replaceInumResponse
#define SOAP_TYPE_ns1__replaceInumResponse (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__replaceInumResponse(struct soap*, struct ns1__replaceInumResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__replaceInumResponse(struct soap*, const struct ns1__replaceInumResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__replaceInumResponse(struct soap*, const char*, int, const struct ns1__replaceInumResponse *, const char*);
SOAP_FMAC3 struct ns1__replaceInumResponse * SOAP_FMAC4 soap_in_ns1__replaceInumResponse(struct soap*, const char*, struct ns1__replaceInumResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__replaceInumResponse(struct soap*, const struct ns1__replaceInumResponse *, const char*, const char*);

#ifndef soap_write_ns1__replaceInumResponse
#define soap_write_ns1__replaceInumResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__replaceInumResponse(soap, data),0) || soap_put_ns1__replaceInumResponse(soap, data, "ns1:replaceInumResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__replaceInumResponse * SOAP_FMAC4 soap_get_ns1__replaceInumResponse(struct soap*, struct ns1__replaceInumResponse *, const char*, const char*);

#ifndef soap_read_ns1__replaceInumResponse
#define soap_read_ns1__replaceInumResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__replaceInumResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__replaceInumResponse * SOAP_FMAC2 soap_instantiate_ns1__replaceInumResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__replaceInumResponse * soap_new_ns1__replaceInumResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__replaceInumResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__replaceInumResponse * soap_new_req_ns1__replaceInumResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__replaceInumResponse *_p = soap_instantiate_ns1__replaceInumResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__replaceInumResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__replaceInumResponse * soap_new_set_ns1__replaceInumResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__replaceInumResponse *_p = soap_instantiate_ns1__replaceInumResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__replaceInumResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__replaceInumResponse(struct soap *soap, struct ns1__replaceInumResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__replaceInumResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setAccountPhoto
#define SOAP_TYPE_ns1__setAccountPhoto (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__setAccountPhoto(struct soap*, struct ns1__setAccountPhoto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__setAccountPhoto(struct soap*, const struct ns1__setAccountPhoto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setAccountPhoto(struct soap*, const char*, int, const struct ns1__setAccountPhoto *, const char*);
SOAP_FMAC3 struct ns1__setAccountPhoto * SOAP_FMAC4 soap_in_ns1__setAccountPhoto(struct soap*, const char*, struct ns1__setAccountPhoto *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__setAccountPhoto(struct soap*, const struct ns1__setAccountPhoto *, const char*, const char*);

#ifndef soap_write_ns1__setAccountPhoto
#define soap_write_ns1__setAccountPhoto(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__setAccountPhoto(soap, data),0) || soap_put_ns1__setAccountPhoto(soap, data, "ns1:setAccountPhoto", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__setAccountPhoto * SOAP_FMAC4 soap_get_ns1__setAccountPhoto(struct soap*, struct ns1__setAccountPhoto *, const char*, const char*);

#ifndef soap_read_ns1__setAccountPhoto
#define soap_read_ns1__setAccountPhoto(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setAccountPhoto(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__setAccountPhoto * SOAP_FMAC2 soap_instantiate_ns1__setAccountPhoto(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__setAccountPhoto * soap_new_ns1__setAccountPhoto(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setAccountPhoto(soap, n, NULL, NULL, NULL); }

inline struct ns1__setAccountPhoto * soap_new_req_ns1__setAccountPhoto(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& photo) { struct ns1__setAccountPhoto *_p = soap_instantiate_ns1__setAccountPhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountPhoto(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->photo = photo; } return _p; }

inline struct ns1__setAccountPhoto * soap_new_set_ns1__setAccountPhoto(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& photo) { struct ns1__setAccountPhoto *_p = soap_instantiate_ns1__setAccountPhoto(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountPhoto(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->photo = photo; } return _p; }

inline void soap_delete_ns1__setAccountPhoto(struct soap *soap, struct ns1__setAccountPhoto *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setAccountPhoto(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setAccountPhotoResponse
#define SOAP_TYPE_ns1__setAccountPhotoResponse (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__setAccountPhotoResponse(struct soap*, struct ns1__setAccountPhotoResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__setAccountPhotoResponse(struct soap*, const struct ns1__setAccountPhotoResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setAccountPhotoResponse(struct soap*, const char*, int, const struct ns1__setAccountPhotoResponse *, const char*);
SOAP_FMAC3 struct ns1__setAccountPhotoResponse * SOAP_FMAC4 soap_in_ns1__setAccountPhotoResponse(struct soap*, const char*, struct ns1__setAccountPhotoResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__setAccountPhotoResponse(struct soap*, const struct ns1__setAccountPhotoResponse *, const char*, const char*);

#ifndef soap_write_ns1__setAccountPhotoResponse
#define soap_write_ns1__setAccountPhotoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__setAccountPhotoResponse(soap, data),0) || soap_put_ns1__setAccountPhotoResponse(soap, data, "ns1:setAccountPhotoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__setAccountPhotoResponse * SOAP_FMAC4 soap_get_ns1__setAccountPhotoResponse(struct soap*, struct ns1__setAccountPhotoResponse *, const char*, const char*);

#ifndef soap_read_ns1__setAccountPhotoResponse
#define soap_read_ns1__setAccountPhotoResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setAccountPhotoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__setAccountPhotoResponse * SOAP_FMAC2 soap_instantiate_ns1__setAccountPhotoResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__setAccountPhotoResponse * soap_new_ns1__setAccountPhotoResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setAccountPhotoResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__setAccountPhotoResponse * soap_new_req_ns1__setAccountPhotoResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__setAccountPhotoResponse *_p = soap_instantiate_ns1__setAccountPhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountPhotoResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__setAccountPhotoResponse * soap_new_set_ns1__setAccountPhotoResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__setAccountPhotoResponse *_p = soap_instantiate_ns1__setAccountPhotoResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountPhotoResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__setAccountPhotoResponse(struct soap *soap, struct ns1__setAccountPhotoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setAccountPhotoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setAccountStatus
#define SOAP_TYPE_ns1__setAccountStatus (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__setAccountStatus(struct soap*, struct ns1__setAccountStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__setAccountStatus(struct soap*, const struct ns1__setAccountStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setAccountStatus(struct soap*, const char*, int, const struct ns1__setAccountStatus *, const char*);
SOAP_FMAC3 struct ns1__setAccountStatus * SOAP_FMAC4 soap_in_ns1__setAccountStatus(struct soap*, const char*, struct ns1__setAccountStatus *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__setAccountStatus(struct soap*, const struct ns1__setAccountStatus *, const char*, const char*);

#ifndef soap_write_ns1__setAccountStatus
#define soap_write_ns1__setAccountStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__setAccountStatus(soap, data),0) || soap_put_ns1__setAccountStatus(soap, data, "ns1:setAccountStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__setAccountStatus * SOAP_FMAC4 soap_get_ns1__setAccountStatus(struct soap*, struct ns1__setAccountStatus *, const char*, const char*);

#ifndef soap_read_ns1__setAccountStatus
#define soap_read_ns1__setAccountStatus(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setAccountStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__setAccountStatus * SOAP_FMAC2 soap_instantiate_ns1__setAccountStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__setAccountStatus * soap_new_ns1__setAccountStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setAccountStatus(soap, n, NULL, NULL, NULL); }

inline struct ns1__setAccountStatus * soap_new_req_ns1__setAccountStatus(struct soap *soap, std::string& accesscode, std::string& userIdentifier, struct soap_dom_element& accountStatus) { struct ns1__setAccountStatus *_p = soap_instantiate_ns1__setAccountStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountStatus(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->accountStatus = accountStatus; } return _p; }

inline struct ns1__setAccountStatus * soap_new_set_ns1__setAccountStatus(struct soap *soap, std::string& accesscode, std::string& userIdentifier, struct soap_dom_element& accountStatus) { struct ns1__setAccountStatus *_p = soap_instantiate_ns1__setAccountStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountStatus(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->accountStatus = accountStatus; } return _p; }

inline void soap_delete_ns1__setAccountStatus(struct soap *soap, struct ns1__setAccountStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setAccountStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__setAccountStatusResponse
#define SOAP_TYPE_ns1__setAccountStatusResponse (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__setAccountStatusResponse(struct soap*, struct ns1__setAccountStatusResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__setAccountStatusResponse(struct soap*, const struct ns1__setAccountStatusResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__setAccountStatusResponse(struct soap*, const char*, int, const struct ns1__setAccountStatusResponse *, const char*);
SOAP_FMAC3 struct ns1__setAccountStatusResponse * SOAP_FMAC4 soap_in_ns1__setAccountStatusResponse(struct soap*, const char*, struct ns1__setAccountStatusResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__setAccountStatusResponse(struct soap*, const struct ns1__setAccountStatusResponse *, const char*, const char*);

#ifndef soap_write_ns1__setAccountStatusResponse
#define soap_write_ns1__setAccountStatusResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__setAccountStatusResponse(soap, data),0) || soap_put_ns1__setAccountStatusResponse(soap, data, "ns1:setAccountStatusResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__setAccountStatusResponse * SOAP_FMAC4 soap_get_ns1__setAccountStatusResponse(struct soap*, struct ns1__setAccountStatusResponse *, const char*, const char*);

#ifndef soap_read_ns1__setAccountStatusResponse
#define soap_read_ns1__setAccountStatusResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__setAccountStatusResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__setAccountStatusResponse * SOAP_FMAC2 soap_instantiate_ns1__setAccountStatusResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__setAccountStatusResponse * soap_new_ns1__setAccountStatusResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__setAccountStatusResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__setAccountStatusResponse * soap_new_req_ns1__setAccountStatusResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__setAccountStatusResponse *_p = soap_instantiate_ns1__setAccountStatusResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountStatusResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__setAccountStatusResponse * soap_new_set_ns1__setAccountStatusResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__setAccountStatusResponse *_p = soap_instantiate_ns1__setAccountStatusResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__setAccountStatusResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__setAccountStatusResponse(struct soap *soap, struct ns1__setAccountStatusResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__setAccountStatusResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClassesAndGroups
#define SOAP_TYPE_ns1__saveUserToClassesAndGroups (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClassesAndGroups(struct soap*, struct ns1__saveUserToClassesAndGroups *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClassesAndGroups(struct soap*, const struct ns1__saveUserToClassesAndGroups *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClassesAndGroups(struct soap*, const char*, int, const struct ns1__saveUserToClassesAndGroups *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClassesAndGroups * SOAP_FMAC4 soap_in_ns1__saveUserToClassesAndGroups(struct soap*, const char*, struct ns1__saveUserToClassesAndGroups *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClassesAndGroups(struct soap*, const struct ns1__saveUserToClassesAndGroups *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClassesAndGroups
#define soap_write_ns1__saveUserToClassesAndGroups(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClassesAndGroups(soap, data),0) || soap_put_ns1__saveUserToClassesAndGroups(soap, data, "ns1:saveUserToClassesAndGroups", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClassesAndGroups * SOAP_FMAC4 soap_get_ns1__saveUserToClassesAndGroups(struct soap*, struct ns1__saveUserToClassesAndGroups *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClassesAndGroups
#define soap_read_ns1__saveUserToClassesAndGroups(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClassesAndGroups(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClassesAndGroups * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClassesAndGroups(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClassesAndGroups * soap_new_ns1__saveUserToClassesAndGroups(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClassesAndGroups(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClassesAndGroups * soap_new_req_ns1__saveUserToClassesAndGroups(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& csvList, int keepOld) { struct ns1__saveUserToClassesAndGroups *_p = soap_instantiate_ns1__saveUserToClassesAndGroups(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesAndGroups(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->csvList = csvList; _p->keepOld = keepOld; } return _p; }

inline struct ns1__saveUserToClassesAndGroups * soap_new_set_ns1__saveUserToClassesAndGroups(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& csvList, int keepOld) { struct ns1__saveUserToClassesAndGroups *_p = soap_instantiate_ns1__saveUserToClassesAndGroups(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesAndGroups(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->csvList = csvList; _p->keepOld = keepOld; } return _p; }

inline void soap_delete_ns1__saveUserToClassesAndGroups(struct soap *soap, struct ns1__saveUserToClassesAndGroups *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClassesAndGroups(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClassesAndGroupsResponse
#define SOAP_TYPE_ns1__saveUserToClassesAndGroupsResponse (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClassesAndGroupsResponse(struct soap*, struct ns1__saveUserToClassesAndGroupsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClassesAndGroupsResponse(struct soap*, const struct ns1__saveUserToClassesAndGroupsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClassesAndGroupsResponse(struct soap*, const char*, int, const struct ns1__saveUserToClassesAndGroupsResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClassesAndGroupsResponse * SOAP_FMAC4 soap_in_ns1__saveUserToClassesAndGroupsResponse(struct soap*, const char*, struct ns1__saveUserToClassesAndGroupsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClassesAndGroupsResponse(struct soap*, const struct ns1__saveUserToClassesAndGroupsResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClassesAndGroupsResponse
#define soap_write_ns1__saveUserToClassesAndGroupsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClassesAndGroupsResponse(soap, data),0) || soap_put_ns1__saveUserToClassesAndGroupsResponse(soap, data, "ns1:saveUserToClassesAndGroupsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClassesAndGroupsResponse * SOAP_FMAC4 soap_get_ns1__saveUserToClassesAndGroupsResponse(struct soap*, struct ns1__saveUserToClassesAndGroupsResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClassesAndGroupsResponse
#define soap_read_ns1__saveUserToClassesAndGroupsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClassesAndGroupsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClassesAndGroupsResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClassesAndGroupsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClassesAndGroupsResponse * soap_new_ns1__saveUserToClassesAndGroupsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClassesAndGroupsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClassesAndGroupsResponse * soap_new_req_ns1__saveUserToClassesAndGroupsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassesAndGroupsResponse *_p = soap_instantiate_ns1__saveUserToClassesAndGroupsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesAndGroupsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveUserToClassesAndGroupsResponse * soap_new_set_ns1__saveUserToClassesAndGroupsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassesAndGroupsResponse *_p = soap_instantiate_ns1__saveUserToClassesAndGroupsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesAndGroupsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveUserToClassesAndGroupsResponse(struct soap *soap, struct ns1__saveUserToClassesAndGroupsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClassesAndGroupsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClass
#define SOAP_TYPE_ns1__saveUserToClass (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClass(struct soap*, struct ns1__saveUserToClass *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClass(struct soap*, const struct ns1__saveUserToClass *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClass(struct soap*, const char*, int, const struct ns1__saveUserToClass *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClass * SOAP_FMAC4 soap_in_ns1__saveUserToClass(struct soap*, const char*, struct ns1__saveUserToClass *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClass(struct soap*, const struct ns1__saveUserToClass *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClass
#define soap_write_ns1__saveUserToClass(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClass(soap, data),0) || soap_put_ns1__saveUserToClass(soap, data, "ns1:saveUserToClass", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClass * SOAP_FMAC4 soap_get_ns1__saveUserToClass(struct soap*, struct ns1__saveUserToClass *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClass
#define soap_read_ns1__saveUserToClass(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClass(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClass * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClass(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClass * soap_new_ns1__saveUserToClass(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClass(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClass * soap_new_req_ns1__saveUserToClass(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& class_, std::string& officialDate) { struct ns1__saveUserToClass *_p = soap_instantiate_ns1__saveUserToClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClass(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->class_ = class_; _p->officialDate = officialDate; } return _p; }

inline struct ns1__saveUserToClass * soap_new_set_ns1__saveUserToClass(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& class_, std::string& officialDate) { struct ns1__saveUserToClass *_p = soap_instantiate_ns1__saveUserToClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClass(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->class_ = class_; _p->officialDate = officialDate; } return _p; }

inline void soap_delete_ns1__saveUserToClass(struct soap *soap, struct ns1__saveUserToClass *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClass(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClassResponse
#define SOAP_TYPE_ns1__saveUserToClassResponse (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClassResponse(struct soap*, struct ns1__saveUserToClassResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClassResponse(struct soap*, const struct ns1__saveUserToClassResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClassResponse(struct soap*, const char*, int, const struct ns1__saveUserToClassResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClassResponse * SOAP_FMAC4 soap_in_ns1__saveUserToClassResponse(struct soap*, const char*, struct ns1__saveUserToClassResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClassResponse(struct soap*, const struct ns1__saveUserToClassResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClassResponse
#define soap_write_ns1__saveUserToClassResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClassResponse(soap, data),0) || soap_put_ns1__saveUserToClassResponse(soap, data, "ns1:saveUserToClassResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClassResponse * SOAP_FMAC4 soap_get_ns1__saveUserToClassResponse(struct soap*, struct ns1__saveUserToClassResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClassResponse
#define soap_read_ns1__saveUserToClassResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClassResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClassResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClassResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClassResponse * soap_new_ns1__saveUserToClassResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClassResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClassResponse * soap_new_req_ns1__saveUserToClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassResponse *_p = soap_instantiate_ns1__saveUserToClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveUserToClassResponse * soap_new_set_ns1__saveUserToClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassResponse *_p = soap_instantiate_ns1__saveUserToClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveUserToClassResponse(struct soap *soap, struct ns1__saveUserToClassResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClassResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__removeUserFromGroup
#define SOAP_TYPE_ns1__removeUserFromGroup (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__removeUserFromGroup(struct soap*, struct ns1__removeUserFromGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__removeUserFromGroup(struct soap*, const struct ns1__removeUserFromGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__removeUserFromGroup(struct soap*, const char*, int, const struct ns1__removeUserFromGroup *, const char*);
SOAP_FMAC3 struct ns1__removeUserFromGroup * SOAP_FMAC4 soap_in_ns1__removeUserFromGroup(struct soap*, const char*, struct ns1__removeUserFromGroup *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__removeUserFromGroup(struct soap*, const struct ns1__removeUserFromGroup *, const char*, const char*);

#ifndef soap_write_ns1__removeUserFromGroup
#define soap_write_ns1__removeUserFromGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__removeUserFromGroup(soap, data),0) || soap_put_ns1__removeUserFromGroup(soap, data, "ns1:removeUserFromGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__removeUserFromGroup * SOAP_FMAC4 soap_get_ns1__removeUserFromGroup(struct soap*, struct ns1__removeUserFromGroup *, const char*, const char*);

#ifndef soap_read_ns1__removeUserFromGroup
#define soap_read_ns1__removeUserFromGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__removeUserFromGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__removeUserFromGroup * SOAP_FMAC2 soap_instantiate_ns1__removeUserFromGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__removeUserFromGroup * soap_new_ns1__removeUserFromGroup(struct soap *soap, int n = -1) { return soap_instantiate_ns1__removeUserFromGroup(soap, n, NULL, NULL, NULL); }

inline struct ns1__removeUserFromGroup * soap_new_req_ns1__removeUserFromGroup(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& class_, std::string& officialDate) { struct ns1__removeUserFromGroup *_p = soap_instantiate_ns1__removeUserFromGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeUserFromGroup(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->class_ = class_; _p->officialDate = officialDate; } return _p; }

inline struct ns1__removeUserFromGroup * soap_new_set_ns1__removeUserFromGroup(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& class_, std::string& officialDate) { struct ns1__removeUserFromGroup *_p = soap_instantiate_ns1__removeUserFromGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeUserFromGroup(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->class_ = class_; _p->officialDate = officialDate; } return _p; }

inline void soap_delete_ns1__removeUserFromGroup(struct soap *soap, struct ns1__removeUserFromGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__removeUserFromGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__removeUserFromGroupResponse
#define SOAP_TYPE_ns1__removeUserFromGroupResponse (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__removeUserFromGroupResponse(struct soap*, struct ns1__removeUserFromGroupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__removeUserFromGroupResponse(struct soap*, const struct ns1__removeUserFromGroupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__removeUserFromGroupResponse(struct soap*, const char*, int, const struct ns1__removeUserFromGroupResponse *, const char*);
SOAP_FMAC3 struct ns1__removeUserFromGroupResponse * SOAP_FMAC4 soap_in_ns1__removeUserFromGroupResponse(struct soap*, const char*, struct ns1__removeUserFromGroupResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__removeUserFromGroupResponse(struct soap*, const struct ns1__removeUserFromGroupResponse *, const char*, const char*);

#ifndef soap_write_ns1__removeUserFromGroupResponse
#define soap_write_ns1__removeUserFromGroupResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__removeUserFromGroupResponse(soap, data),0) || soap_put_ns1__removeUserFromGroupResponse(soap, data, "ns1:removeUserFromGroupResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__removeUserFromGroupResponse * SOAP_FMAC4 soap_get_ns1__removeUserFromGroupResponse(struct soap*, struct ns1__removeUserFromGroupResponse *, const char*, const char*);

#ifndef soap_read_ns1__removeUserFromGroupResponse
#define soap_read_ns1__removeUserFromGroupResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__removeUserFromGroupResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__removeUserFromGroupResponse * SOAP_FMAC2 soap_instantiate_ns1__removeUserFromGroupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__removeUserFromGroupResponse * soap_new_ns1__removeUserFromGroupResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__removeUserFromGroupResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__removeUserFromGroupResponse * soap_new_req_ns1__removeUserFromGroupResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__removeUserFromGroupResponse *_p = soap_instantiate_ns1__removeUserFromGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeUserFromGroupResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__removeUserFromGroupResponse * soap_new_set_ns1__removeUserFromGroupResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__removeUserFromGroupResponse *_p = soap_instantiate_ns1__removeUserFromGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__removeUserFromGroupResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__removeUserFromGroupResponse(struct soap *soap, struct ns1__removeUserFromGroupResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__removeUserFromGroupResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClasses
#define SOAP_TYPE_ns1__saveUserToClasses (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClasses(struct soap*, struct ns1__saveUserToClasses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClasses(struct soap*, const struct ns1__saveUserToClasses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClasses(struct soap*, const char*, int, const struct ns1__saveUserToClasses *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClasses * SOAP_FMAC4 soap_in_ns1__saveUserToClasses(struct soap*, const char*, struct ns1__saveUserToClasses *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClasses(struct soap*, const struct ns1__saveUserToClasses *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClasses
#define soap_write_ns1__saveUserToClasses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClasses(soap, data),0) || soap_put_ns1__saveUserToClasses(soap, data, "ns1:saveUserToClasses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClasses * SOAP_FMAC4 soap_get_ns1__saveUserToClasses(struct soap*, struct ns1__saveUserToClasses *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClasses
#define soap_read_ns1__saveUserToClasses(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClasses(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClasses * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClasses(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClasses * soap_new_ns1__saveUserToClasses(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClasses(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClasses * soap_new_req_ns1__saveUserToClasses(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& csvList) { struct ns1__saveUserToClasses *_p = soap_instantiate_ns1__saveUserToClasses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClasses(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->csvList = csvList; } return _p; }

inline struct ns1__saveUserToClasses * soap_new_set_ns1__saveUserToClasses(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& csvList) { struct ns1__saveUserToClasses *_p = soap_instantiate_ns1__saveUserToClasses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClasses(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->csvList = csvList; } return _p; }

inline void soap_delete_ns1__saveUserToClasses(struct soap *soap, struct ns1__saveUserToClasses *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClasses(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserToClassesResponse
#define SOAP_TYPE_ns1__saveUserToClassesResponse (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserToClassesResponse(struct soap*, struct ns1__saveUserToClassesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserToClassesResponse(struct soap*, const struct ns1__saveUserToClassesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserToClassesResponse(struct soap*, const char*, int, const struct ns1__saveUserToClassesResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserToClassesResponse * SOAP_FMAC4 soap_in_ns1__saveUserToClassesResponse(struct soap*, const char*, struct ns1__saveUserToClassesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserToClassesResponse(struct soap*, const struct ns1__saveUserToClassesResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserToClassesResponse
#define soap_write_ns1__saveUserToClassesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserToClassesResponse(soap, data),0) || soap_put_ns1__saveUserToClassesResponse(soap, data, "ns1:saveUserToClassesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserToClassesResponse * SOAP_FMAC4 soap_get_ns1__saveUserToClassesResponse(struct soap*, struct ns1__saveUserToClassesResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserToClassesResponse
#define soap_read_ns1__saveUserToClassesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserToClassesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserToClassesResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserToClassesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserToClassesResponse * soap_new_ns1__saveUserToClassesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserToClassesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserToClassesResponse * soap_new_req_ns1__saveUserToClassesResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassesResponse *_p = soap_instantiate_ns1__saveUserToClassesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveUserToClassesResponse * soap_new_set_ns1__saveUserToClassesResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserToClassesResponse *_p = soap_instantiate_ns1__saveUserToClassesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserToClassesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveUserToClassesResponse(struct soap *soap, struct ns1__saveUserToClassesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserToClassesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__delClass
#define SOAP_TYPE_ns1__delClass (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__delClass(struct soap*, struct ns1__delClass *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__delClass(struct soap*, const struct ns1__delClass *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delClass(struct soap*, const char*, int, const struct ns1__delClass *, const char*);
SOAP_FMAC3 struct ns1__delClass * SOAP_FMAC4 soap_in_ns1__delClass(struct soap*, const char*, struct ns1__delClass *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__delClass(struct soap*, const struct ns1__delClass *, const char*, const char*);

#ifndef soap_write_ns1__delClass
#define soap_write_ns1__delClass(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__delClass(soap, data),0) || soap_put_ns1__delClass(soap, data, "ns1:delClass", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__delClass * SOAP_FMAC4 soap_get_ns1__delClass(struct soap*, struct ns1__delClass *, const char*, const char*);

#ifndef soap_read_ns1__delClass
#define soap_read_ns1__delClass(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__delClass(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__delClass * SOAP_FMAC2 soap_instantiate_ns1__delClass(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__delClass * soap_new_ns1__delClass(struct soap *soap, int n = -1) { return soap_instantiate_ns1__delClass(soap, n, NULL, NULL, NULL); }

inline struct ns1__delClass * soap_new_req_ns1__delClass(struct soap *soap, std::string& accesscode, std::string& code) { struct ns1__delClass *_p = soap_instantiate_ns1__delClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delClass(soap, _p); _p->accesscode = accesscode; _p->code = code; } return _p; }

inline struct ns1__delClass * soap_new_set_ns1__delClass(struct soap *soap, std::string& accesscode, std::string& code) { struct ns1__delClass *_p = soap_instantiate_ns1__delClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delClass(soap, _p); _p->accesscode = accesscode; _p->code = code; } return _p; }

inline void soap_delete_ns1__delClass(struct soap *soap, struct ns1__delClass *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delClass(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__delClassResponse
#define SOAP_TYPE_ns1__delClassResponse (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__delClassResponse(struct soap*, struct ns1__delClassResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__delClassResponse(struct soap*, const struct ns1__delClassResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delClassResponse(struct soap*, const char*, int, const struct ns1__delClassResponse *, const char*);
SOAP_FMAC3 struct ns1__delClassResponse * SOAP_FMAC4 soap_in_ns1__delClassResponse(struct soap*, const char*, struct ns1__delClassResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__delClassResponse(struct soap*, const struct ns1__delClassResponse *, const char*, const char*);

#ifndef soap_write_ns1__delClassResponse
#define soap_write_ns1__delClassResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__delClassResponse(soap, data),0) || soap_put_ns1__delClassResponse(soap, data, "ns1:delClassResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__delClassResponse * SOAP_FMAC4 soap_get_ns1__delClassResponse(struct soap*, struct ns1__delClassResponse *, const char*, const char*);

#ifndef soap_read_ns1__delClassResponse
#define soap_read_ns1__delClassResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__delClassResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__delClassResponse * SOAP_FMAC2 soap_instantiate_ns1__delClassResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__delClassResponse * soap_new_ns1__delClassResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__delClassResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__delClassResponse * soap_new_req_ns1__delClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__delClassResponse *_p = soap_instantiate_ns1__delClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__delClassResponse * soap_new_set_ns1__delClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__delClassResponse *_p = soap_instantiate_ns1__delClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__delClassResponse(struct soap *soap, struct ns1__delClassResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delClassResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClassListJson
#define SOAP_TYPE_ns1__saveClassListJson (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClassListJson(struct soap*, struct ns1__saveClassListJson *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClassListJson(struct soap*, const struct ns1__saveClassListJson *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClassListJson(struct soap*, const char*, int, const struct ns1__saveClassListJson *, const char*);
SOAP_FMAC3 struct ns1__saveClassListJson * SOAP_FMAC4 soap_in_ns1__saveClassListJson(struct soap*, const char*, struct ns1__saveClassListJson *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClassListJson(struct soap*, const struct ns1__saveClassListJson *, const char*, const char*);

#ifndef soap_write_ns1__saveClassListJson
#define soap_write_ns1__saveClassListJson(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClassListJson(soap, data),0) || soap_put_ns1__saveClassListJson(soap, data, "ns1:saveClassListJson", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClassListJson * SOAP_FMAC4 soap_get_ns1__saveClassListJson(struct soap*, struct ns1__saveClassListJson *, const char*, const char*);

#ifndef soap_read_ns1__saveClassListJson
#define soap_read_ns1__saveClassListJson(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClassListJson(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClassListJson * SOAP_FMAC2 soap_instantiate_ns1__saveClassListJson(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClassListJson * soap_new_ns1__saveClassListJson(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClassListJson(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClassListJson * soap_new_req_ns1__saveClassListJson(struct soap *soap, std::string& accesscode, std::string& jsonList) { struct ns1__saveClassListJson *_p = soap_instantiate_ns1__saveClassListJson(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListJson(soap, _p); _p->accesscode = accesscode; _p->jsonList = jsonList; } return _p; }

inline struct ns1__saveClassListJson * soap_new_set_ns1__saveClassListJson(struct soap *soap, std::string& accesscode, std::string& jsonList) { struct ns1__saveClassListJson *_p = soap_instantiate_ns1__saveClassListJson(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListJson(soap, _p); _p->accesscode = accesscode; _p->jsonList = jsonList; } return _p; }

inline void soap_delete_ns1__saveClassListJson(struct soap *soap, struct ns1__saveClassListJson *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClassListJson(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClassListJsonResponse
#define SOAP_TYPE_ns1__saveClassListJsonResponse (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClassListJsonResponse(struct soap*, struct ns1__saveClassListJsonResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClassListJsonResponse(struct soap*, const struct ns1__saveClassListJsonResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClassListJsonResponse(struct soap*, const char*, int, const struct ns1__saveClassListJsonResponse *, const char*);
SOAP_FMAC3 struct ns1__saveClassListJsonResponse * SOAP_FMAC4 soap_in_ns1__saveClassListJsonResponse(struct soap*, const char*, struct ns1__saveClassListJsonResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClassListJsonResponse(struct soap*, const struct ns1__saveClassListJsonResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveClassListJsonResponse
#define soap_write_ns1__saveClassListJsonResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClassListJsonResponse(soap, data),0) || soap_put_ns1__saveClassListJsonResponse(soap, data, "ns1:saveClassListJsonResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClassListJsonResponse * SOAP_FMAC4 soap_get_ns1__saveClassListJsonResponse(struct soap*, struct ns1__saveClassListJsonResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveClassListJsonResponse
#define soap_read_ns1__saveClassListJsonResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClassListJsonResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClassListJsonResponse * SOAP_FMAC2 soap_instantiate_ns1__saveClassListJsonResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClassListJsonResponse * soap_new_ns1__saveClassListJsonResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClassListJsonResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClassListJsonResponse * soap_new_req_ns1__saveClassListJsonResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassListJsonResponse *_p = soap_instantiate_ns1__saveClassListJsonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListJsonResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveClassListJsonResponse * soap_new_set_ns1__saveClassListJsonResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassListJsonResponse *_p = soap_instantiate_ns1__saveClassListJsonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListJsonResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveClassListJsonResponse(struct soap *soap, struct ns1__saveClassListJsonResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClassListJsonResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClassList
#define SOAP_TYPE_ns1__saveClassList (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClassList(struct soap*, struct ns1__saveClassList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClassList(struct soap*, const struct ns1__saveClassList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClassList(struct soap*, const char*, int, const struct ns1__saveClassList *, const char*);
SOAP_FMAC3 struct ns1__saveClassList * SOAP_FMAC4 soap_in_ns1__saveClassList(struct soap*, const char*, struct ns1__saveClassList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClassList(struct soap*, const struct ns1__saveClassList *, const char*, const char*);

#ifndef soap_write_ns1__saveClassList
#define soap_write_ns1__saveClassList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClassList(soap, data),0) || soap_put_ns1__saveClassList(soap, data, "ns1:saveClassList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClassList * SOAP_FMAC4 soap_get_ns1__saveClassList(struct soap*, struct ns1__saveClassList *, const char*, const char*);

#ifndef soap_read_ns1__saveClassList
#define soap_read_ns1__saveClassList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClassList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClassList * SOAP_FMAC2 soap_instantiate_ns1__saveClassList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClassList * soap_new_ns1__saveClassList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClassList(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClassList * soap_new_req_ns1__saveClassList(struct soap *soap, std::string& accesscode, std::string& serializedList) { struct ns1__saveClassList *_p = soap_instantiate_ns1__saveClassList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassList(soap, _p); _p->accesscode = accesscode; _p->serializedList = serializedList; } return _p; }

inline struct ns1__saveClassList * soap_new_set_ns1__saveClassList(struct soap *soap, std::string& accesscode, std::string& serializedList) { struct ns1__saveClassList *_p = soap_instantiate_ns1__saveClassList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassList(soap, _p); _p->accesscode = accesscode; _p->serializedList = serializedList; } return _p; }

inline void soap_delete_ns1__saveClassList(struct soap *soap, struct ns1__saveClassList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClassList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClassListResponse
#define SOAP_TYPE_ns1__saveClassListResponse (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClassListResponse(struct soap*, struct ns1__saveClassListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClassListResponse(struct soap*, const struct ns1__saveClassListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClassListResponse(struct soap*, const char*, int, const struct ns1__saveClassListResponse *, const char*);
SOAP_FMAC3 struct ns1__saveClassListResponse * SOAP_FMAC4 soap_in_ns1__saveClassListResponse(struct soap*, const char*, struct ns1__saveClassListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClassListResponse(struct soap*, const struct ns1__saveClassListResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveClassListResponse
#define soap_write_ns1__saveClassListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClassListResponse(soap, data),0) || soap_put_ns1__saveClassListResponse(soap, data, "ns1:saveClassListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClassListResponse * SOAP_FMAC4 soap_get_ns1__saveClassListResponse(struct soap*, struct ns1__saveClassListResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveClassListResponse
#define soap_read_ns1__saveClassListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClassListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClassListResponse * SOAP_FMAC2 soap_instantiate_ns1__saveClassListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClassListResponse * soap_new_ns1__saveClassListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClassListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClassListResponse * soap_new_req_ns1__saveClassListResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassListResponse *_p = soap_instantiate_ns1__saveClassListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveClassListResponse * soap_new_set_ns1__saveClassListResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassListResponse *_p = soap_instantiate_ns1__saveClassListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassListResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveClassListResponse(struct soap *soap, struct ns1__saveClassListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClassListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassListJson
#define SOAP_TYPE_ns1__getClassListJson (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassListJson(struct soap*, struct ns1__getClassListJson *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassListJson(struct soap*, const struct ns1__getClassListJson *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassListJson(struct soap*, const char*, int, const struct ns1__getClassListJson *, const char*);
SOAP_FMAC3 struct ns1__getClassListJson * SOAP_FMAC4 soap_in_ns1__getClassListJson(struct soap*, const char*, struct ns1__getClassListJson *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassListJson(struct soap*, const struct ns1__getClassListJson *, const char*, const char*);

#ifndef soap_write_ns1__getClassListJson
#define soap_write_ns1__getClassListJson(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassListJson(soap, data),0) || soap_put_ns1__getClassListJson(soap, data, "ns1:getClassListJson", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassListJson * SOAP_FMAC4 soap_get_ns1__getClassListJson(struct soap*, struct ns1__getClassListJson *, const char*, const char*);

#ifndef soap_read_ns1__getClassListJson
#define soap_read_ns1__getClassListJson(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassListJson(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassListJson * SOAP_FMAC2 soap_instantiate_ns1__getClassListJson(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassListJson * soap_new_ns1__getClassListJson(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassListJson(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassListJson * soap_new_req_ns1__getClassListJson(struct soap *soap, struct soap_dom_element& accesscode) { struct ns1__getClassListJson *_p = soap_instantiate_ns1__getClassListJson(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListJson(soap, _p); _p->accesscode = accesscode; } return _p; }

inline struct ns1__getClassListJson * soap_new_set_ns1__getClassListJson(struct soap *soap, struct soap_dom_element& accesscode) { struct ns1__getClassListJson *_p = soap_instantiate_ns1__getClassListJson(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListJson(soap, _p); _p->accesscode = accesscode; } return _p; }

inline void soap_delete_ns1__getClassListJson(struct soap *soap, struct ns1__getClassListJson *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassListJson(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassListJsonResponse
#define SOAP_TYPE_ns1__getClassListJsonResponse (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassListJsonResponse(struct soap*, struct ns1__getClassListJsonResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassListJsonResponse(struct soap*, const struct ns1__getClassListJsonResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassListJsonResponse(struct soap*, const char*, int, const struct ns1__getClassListJsonResponse *, const char*);
SOAP_FMAC3 struct ns1__getClassListJsonResponse * SOAP_FMAC4 soap_in_ns1__getClassListJsonResponse(struct soap*, const char*, struct ns1__getClassListJsonResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassListJsonResponse(struct soap*, const struct ns1__getClassListJsonResponse *, const char*, const char*);

#ifndef soap_write_ns1__getClassListJsonResponse
#define soap_write_ns1__getClassListJsonResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassListJsonResponse(soap, data),0) || soap_put_ns1__getClassListJsonResponse(soap, data, "ns1:getClassListJsonResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassListJsonResponse * SOAP_FMAC4 soap_get_ns1__getClassListJsonResponse(struct soap*, struct ns1__getClassListJsonResponse *, const char*, const char*);

#ifndef soap_read_ns1__getClassListJsonResponse
#define soap_read_ns1__getClassListJsonResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassListJsonResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassListJsonResponse * SOAP_FMAC2 soap_instantiate_ns1__getClassListJsonResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassListJsonResponse * soap_new_ns1__getClassListJsonResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassListJsonResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassListJsonResponse * soap_new_req_ns1__getClassListJsonResponse(struct soap *soap, std::string& return_) { struct ns1__getClassListJsonResponse *_p = soap_instantiate_ns1__getClassListJsonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListJsonResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getClassListJsonResponse * soap_new_set_ns1__getClassListJsonResponse(struct soap *soap, std::string& return_) { struct ns1__getClassListJsonResponse *_p = soap_instantiate_ns1__getClassListJsonResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListJsonResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getClassListJsonResponse(struct soap *soap, struct ns1__getClassListJsonResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassListJsonResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassList
#define SOAP_TYPE_ns1__getClassList (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassList(struct soap*, struct ns1__getClassList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassList(struct soap*, const struct ns1__getClassList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassList(struct soap*, const char*, int, const struct ns1__getClassList *, const char*);
SOAP_FMAC3 struct ns1__getClassList * SOAP_FMAC4 soap_in_ns1__getClassList(struct soap*, const char*, struct ns1__getClassList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassList(struct soap*, const struct ns1__getClassList *, const char*, const char*);

#ifndef soap_write_ns1__getClassList
#define soap_write_ns1__getClassList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassList(soap, data),0) || soap_put_ns1__getClassList(soap, data, "ns1:getClassList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassList * SOAP_FMAC4 soap_get_ns1__getClassList(struct soap*, struct ns1__getClassList *, const char*, const char*);

#ifndef soap_read_ns1__getClassList
#define soap_read_ns1__getClassList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassList * SOAP_FMAC2 soap_instantiate_ns1__getClassList(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassList * soap_new_ns1__getClassList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassList(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassList * soap_new_req_ns1__getClassList(struct soap *soap, struct soap_dom_element& accesscode) { struct ns1__getClassList *_p = soap_instantiate_ns1__getClassList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassList(soap, _p); _p->accesscode = accesscode; } return _p; }

inline struct ns1__getClassList * soap_new_set_ns1__getClassList(struct soap *soap, struct soap_dom_element& accesscode) { struct ns1__getClassList *_p = soap_instantiate_ns1__getClassList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassList(soap, _p); _p->accesscode = accesscode; } return _p; }

inline void soap_delete_ns1__getClassList(struct soap *soap, struct ns1__getClassList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getClassListResponse
#define SOAP_TYPE_ns1__getClassListResponse (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getClassListResponse(struct soap*, struct ns1__getClassListResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getClassListResponse(struct soap*, const struct ns1__getClassListResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getClassListResponse(struct soap*, const char*, int, const struct ns1__getClassListResponse *, const char*);
SOAP_FMAC3 struct ns1__getClassListResponse * SOAP_FMAC4 soap_in_ns1__getClassListResponse(struct soap*, const char*, struct ns1__getClassListResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getClassListResponse(struct soap*, const struct ns1__getClassListResponse *, const char*, const char*);

#ifndef soap_write_ns1__getClassListResponse
#define soap_write_ns1__getClassListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getClassListResponse(soap, data),0) || soap_put_ns1__getClassListResponse(soap, data, "ns1:getClassListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getClassListResponse * SOAP_FMAC4 soap_get_ns1__getClassListResponse(struct soap*, struct ns1__getClassListResponse *, const char*, const char*);

#ifndef soap_read_ns1__getClassListResponse
#define soap_read_ns1__getClassListResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getClassListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getClassListResponse * SOAP_FMAC2 soap_instantiate_ns1__getClassListResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getClassListResponse * soap_new_ns1__getClassListResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getClassListResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getClassListResponse * soap_new_req_ns1__getClassListResponse(struct soap *soap, std::string& return_) { struct ns1__getClassListResponse *_p = soap_instantiate_ns1__getClassListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getClassListResponse * soap_new_set_ns1__getClassListResponse(struct soap *soap, std::string& return_) { struct ns1__getClassListResponse *_p = soap_instantiate_ns1__getClassListResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getClassListResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getClassListResponse(struct soap *soap, struct ns1__getClassListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getClassListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserParameter
#define SOAP_TYPE_ns1__saveUserParameter (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserParameter(struct soap*, struct ns1__saveUserParameter *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserParameter(struct soap*, const struct ns1__saveUserParameter *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserParameter(struct soap*, const char*, int, const struct ns1__saveUserParameter *, const char*);
SOAP_FMAC3 struct ns1__saveUserParameter * SOAP_FMAC4 soap_in_ns1__saveUserParameter(struct soap*, const char*, struct ns1__saveUserParameter *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserParameter(struct soap*, const struct ns1__saveUserParameter *, const char*, const char*);

#ifndef soap_write_ns1__saveUserParameter
#define soap_write_ns1__saveUserParameter(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserParameter(soap, data),0) || soap_put_ns1__saveUserParameter(soap, data, "ns1:saveUserParameter", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserParameter * SOAP_FMAC4 soap_get_ns1__saveUserParameter(struct soap*, struct ns1__saveUserParameter *, const char*, const char*);

#ifndef soap_read_ns1__saveUserParameter
#define soap_read_ns1__saveUserParameter(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserParameter(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserParameter * SOAP_FMAC2 soap_instantiate_ns1__saveUserParameter(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserParameter * soap_new_ns1__saveUserParameter(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserParameter(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserParameter * soap_new_req_ns1__saveUserParameter(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& paramName, std::string& paramValue) { struct ns1__saveUserParameter *_p = soap_instantiate_ns1__saveUserParameter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserParameter(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->paramName = paramName; _p->paramValue = paramValue; } return _p; }

inline struct ns1__saveUserParameter * soap_new_set_ns1__saveUserParameter(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& paramName, std::string& paramValue) { struct ns1__saveUserParameter *_p = soap_instantiate_ns1__saveUserParameter(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserParameter(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->paramName = paramName; _p->paramValue = paramValue; } return _p; }

inline void soap_delete_ns1__saveUserParameter(struct soap *soap, struct ns1__saveUserParameter *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserParameter(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserParameterResponse
#define SOAP_TYPE_ns1__saveUserParameterResponse (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserParameterResponse(struct soap*, struct ns1__saveUserParameterResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserParameterResponse(struct soap*, const struct ns1__saveUserParameterResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserParameterResponse(struct soap*, const char*, int, const struct ns1__saveUserParameterResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserParameterResponse * SOAP_FMAC4 soap_in_ns1__saveUserParameterResponse(struct soap*, const char*, struct ns1__saveUserParameterResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserParameterResponse(struct soap*, const struct ns1__saveUserParameterResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserParameterResponse
#define soap_write_ns1__saveUserParameterResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserParameterResponse(soap, data),0) || soap_put_ns1__saveUserParameterResponse(soap, data, "ns1:saveUserParameterResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserParameterResponse * SOAP_FMAC4 soap_get_ns1__saveUserParameterResponse(struct soap*, struct ns1__saveUserParameterResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserParameterResponse
#define soap_read_ns1__saveUserParameterResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserParameterResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserParameterResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserParameterResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserParameterResponse * soap_new_ns1__saveUserParameterResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserParameterResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserParameterResponse * soap_new_req_ns1__saveUserParameterResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserParameterResponse *_p = soap_instantiate_ns1__saveUserParameterResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserParameterResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveUserParameterResponse * soap_new_set_ns1__saveUserParameterResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserParameterResponse *_p = soap_instantiate_ns1__saveUserParameterResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserParameterResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveUserParameterResponse(struct soap *soap, struct ns1__saveUserParameterResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserParameterResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__delUser
#define SOAP_TYPE_ns1__delUser (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__delUser(struct soap*, struct ns1__delUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__delUser(struct soap*, const struct ns1__delUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delUser(struct soap*, const char*, int, const struct ns1__delUser *, const char*);
SOAP_FMAC3 struct ns1__delUser * SOAP_FMAC4 soap_in_ns1__delUser(struct soap*, const char*, struct ns1__delUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__delUser(struct soap*, const struct ns1__delUser *, const char*, const char*);

#ifndef soap_write_ns1__delUser
#define soap_write_ns1__delUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__delUser(soap, data),0) || soap_put_ns1__delUser(soap, data, "ns1:delUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__delUser * SOAP_FMAC4 soap_get_ns1__delUser(struct soap*, struct ns1__delUser *, const char*, const char*);

#ifndef soap_read_ns1__delUser
#define soap_read_ns1__delUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__delUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__delUser * SOAP_FMAC2 soap_instantiate_ns1__delUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__delUser * soap_new_ns1__delUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__delUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__delUser * soap_new_req_ns1__delUser(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& officialDate) { struct ns1__delUser *_p = soap_instantiate_ns1__delUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delUser(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->officialDate = officialDate; } return _p; }

inline struct ns1__delUser * soap_new_set_ns1__delUser(struct soap *soap, std::string& accesscode, std::string& userIdentifier, std::string& officialDate) { struct ns1__delUser *_p = soap_instantiate_ns1__delUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delUser(soap, _p); _p->accesscode = accesscode; _p->userIdentifier = userIdentifier; _p->officialDate = officialDate; } return _p; }

inline void soap_delete_ns1__delUser(struct soap *soap, struct ns1__delUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__delUserResponse
#define SOAP_TYPE_ns1__delUserResponse (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__delUserResponse(struct soap*, struct ns1__delUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__delUserResponse(struct soap*, const struct ns1__delUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__delUserResponse(struct soap*, const char*, int, const struct ns1__delUserResponse *, const char*);
SOAP_FMAC3 struct ns1__delUserResponse * SOAP_FMAC4 soap_in_ns1__delUserResponse(struct soap*, const char*, struct ns1__delUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__delUserResponse(struct soap*, const struct ns1__delUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__delUserResponse
#define soap_write_ns1__delUserResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__delUserResponse(soap, data),0) || soap_put_ns1__delUserResponse(soap, data, "ns1:delUserResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__delUserResponse * SOAP_FMAC4 soap_get_ns1__delUserResponse(struct soap*, struct ns1__delUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__delUserResponse
#define soap_read_ns1__delUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__delUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__delUserResponse * SOAP_FMAC2 soap_instantiate_ns1__delUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__delUserResponse * soap_new_ns1__delUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__delUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__delUserResponse * soap_new_req_ns1__delUserResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__delUserResponse *_p = soap_instantiate_ns1__delUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delUserResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__delUserResponse * soap_new_set_ns1__delUserResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__delUserResponse *_p = soap_instantiate_ns1__delUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__delUserResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__delUserResponse(struct soap *soap, struct ns1__delUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__delUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCourses
#define SOAP_TYPE_ns1__getCourses (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCourses(struct soap*, struct ns1__getCourses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCourses(struct soap*, const struct ns1__getCourses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCourses(struct soap*, const char*, int, const struct ns1__getCourses *, const char*);
SOAP_FMAC3 struct ns1__getCourses * SOAP_FMAC4 soap_in_ns1__getCourses(struct soap*, const char*, struct ns1__getCourses *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCourses(struct soap*, const struct ns1__getCourses *, const char*, const char*);

#ifndef soap_write_ns1__getCourses
#define soap_write_ns1__getCourses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getCourses(soap, data),0) || soap_put_ns1__getCourses(soap, data, "ns1:getCourses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getCourses * SOAP_FMAC4 soap_get_ns1__getCourses(struct soap*, struct ns1__getCourses *, const char*, const char*);

#ifndef soap_read_ns1__getCourses
#define soap_read_ns1__getCourses(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCourses(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getCourses * SOAP_FMAC2 soap_instantiate_ns1__getCourses(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCourses * soap_new_ns1__getCourses(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCourses(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCourses * soap_new_req_ns1__getCourses(struct soap *soap, std::string& accesscode) { struct ns1__getCourses *_p = soap_instantiate_ns1__getCourses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCourses(soap, _p); _p->accesscode = accesscode; } return _p; }

inline struct ns1__getCourses * soap_new_set_ns1__getCourses(struct soap *soap, std::string& accesscode) { struct ns1__getCourses *_p = soap_instantiate_ns1__getCourses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCourses(soap, _p); _p->accesscode = accesscode; } return _p; }

inline void soap_delete_ns1__getCourses(struct soap *soap, struct ns1__getCourses *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCourses(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getCoursesResponse
#define SOAP_TYPE_ns1__getCoursesResponse (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getCoursesResponse(struct soap*, struct ns1__getCoursesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getCoursesResponse(struct soap*, const struct ns1__getCoursesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getCoursesResponse(struct soap*, const char*, int, const struct ns1__getCoursesResponse *, const char*);
SOAP_FMAC3 struct ns1__getCoursesResponse * SOAP_FMAC4 soap_in_ns1__getCoursesResponse(struct soap*, const char*, struct ns1__getCoursesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getCoursesResponse(struct soap*, const struct ns1__getCoursesResponse *, const char*, const char*);

#ifndef soap_write_ns1__getCoursesResponse
#define soap_write_ns1__getCoursesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getCoursesResponse(soap, data),0) || soap_put_ns1__getCoursesResponse(soap, data, "ns1:getCoursesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getCoursesResponse * SOAP_FMAC4 soap_get_ns1__getCoursesResponse(struct soap*, struct ns1__getCoursesResponse *, const char*, const char*);

#ifndef soap_read_ns1__getCoursesResponse
#define soap_read_ns1__getCoursesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getCoursesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getCoursesResponse * SOAP_FMAC2 soap_instantiate_ns1__getCoursesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getCoursesResponse * soap_new_ns1__getCoursesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getCoursesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getCoursesResponse * soap_new_req_ns1__getCoursesResponse(struct soap *soap, std::string& return_) { struct ns1__getCoursesResponse *_p = soap_instantiate_ns1__getCoursesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCoursesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getCoursesResponse * soap_new_set_ns1__getCoursesResponse(struct soap *soap, std::string& return_) { struct ns1__getCoursesResponse *_p = soap_instantiate_ns1__getCoursesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getCoursesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getCoursesResponse(struct soap *soap, struct ns1__getCoursesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getCoursesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourseStudents
#define SOAP_TYPE_ns1__addCourseStudents (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourseStudents(struct soap*, struct ns1__addCourseStudents *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourseStudents(struct soap*, const struct ns1__addCourseStudents *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourseStudents(struct soap*, const char*, int, const struct ns1__addCourseStudents *, const char*);
SOAP_FMAC3 struct ns1__addCourseStudents * SOAP_FMAC4 soap_in_ns1__addCourseStudents(struct soap*, const char*, struct ns1__addCourseStudents *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourseStudents(struct soap*, const struct ns1__addCourseStudents *, const char*, const char*);

#ifndef soap_write_ns1__addCourseStudents
#define soap_write_ns1__addCourseStudents(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourseStudents(soap, data),0) || soap_put_ns1__addCourseStudents(soap, data, "ns1:addCourseStudents", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourseStudents * SOAP_FMAC4 soap_get_ns1__addCourseStudents(struct soap*, struct ns1__addCourseStudents *, const char*, const char*);

#ifndef soap_read_ns1__addCourseStudents
#define soap_read_ns1__addCourseStudents(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourseStudents(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourseStudents * SOAP_FMAC2 soap_instantiate_ns1__addCourseStudents(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourseStudents * soap_new_ns1__addCourseStudents(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourseStudents(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourseStudents * soap_new_req_ns1__addCourseStudents(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc, std::string& groupIds) { struct ns1__addCourseStudents *_p = soap_instantiate_ns1__addCourseStudents(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseStudents(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; _p->groupIds = groupIds; } return _p; }

inline struct ns1__addCourseStudents * soap_new_set_ns1__addCourseStudents(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc, std::string& groupIds) { struct ns1__addCourseStudents *_p = soap_instantiate_ns1__addCourseStudents(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseStudents(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; _p->groupIds = groupIds; } return _p; }

inline void soap_delete_ns1__addCourseStudents(struct soap *soap, struct ns1__addCourseStudents *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourseStudents(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourseStudentsResponse
#define SOAP_TYPE_ns1__addCourseStudentsResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourseStudentsResponse(struct soap*, struct ns1__addCourseStudentsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourseStudentsResponse(struct soap*, const struct ns1__addCourseStudentsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourseStudentsResponse(struct soap*, const char*, int, const struct ns1__addCourseStudentsResponse *, const char*);
SOAP_FMAC3 struct ns1__addCourseStudentsResponse * SOAP_FMAC4 soap_in_ns1__addCourseStudentsResponse(struct soap*, const char*, struct ns1__addCourseStudentsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourseStudentsResponse(struct soap*, const struct ns1__addCourseStudentsResponse *, const char*, const char*);

#ifndef soap_write_ns1__addCourseStudentsResponse
#define soap_write_ns1__addCourseStudentsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourseStudentsResponse(soap, data),0) || soap_put_ns1__addCourseStudentsResponse(soap, data, "ns1:addCourseStudentsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourseStudentsResponse * SOAP_FMAC4 soap_get_ns1__addCourseStudentsResponse(struct soap*, struct ns1__addCourseStudentsResponse *, const char*, const char*);

#ifndef soap_read_ns1__addCourseStudentsResponse
#define soap_read_ns1__addCourseStudentsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourseStudentsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourseStudentsResponse * SOAP_FMAC2 soap_instantiate_ns1__addCourseStudentsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourseStudentsResponse * soap_new_ns1__addCourseStudentsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourseStudentsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourseStudentsResponse * soap_new_req_ns1__addCourseStudentsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__addCourseStudentsResponse *_p = soap_instantiate_ns1__addCourseStudentsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseStudentsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__addCourseStudentsResponse * soap_new_set_ns1__addCourseStudentsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__addCourseStudentsResponse *_p = soap_instantiate_ns1__addCourseStudentsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseStudentsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__addCourseStudentsResponse(struct soap *soap, struct ns1__addCourseStudentsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourseStudentsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourseTeacher
#define SOAP_TYPE_ns1__addCourseTeacher (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourseTeacher(struct soap*, struct ns1__addCourseTeacher *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourseTeacher(struct soap*, const struct ns1__addCourseTeacher *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourseTeacher(struct soap*, const char*, int, const struct ns1__addCourseTeacher *, const char*);
SOAP_FMAC3 struct ns1__addCourseTeacher * SOAP_FMAC4 soap_in_ns1__addCourseTeacher(struct soap*, const char*, struct ns1__addCourseTeacher *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourseTeacher(struct soap*, const struct ns1__addCourseTeacher *, const char*, const char*);

#ifndef soap_write_ns1__addCourseTeacher
#define soap_write_ns1__addCourseTeacher(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourseTeacher(soap, data),0) || soap_put_ns1__addCourseTeacher(soap, data, "ns1:addCourseTeacher", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourseTeacher * SOAP_FMAC4 soap_get_ns1__addCourseTeacher(struct soap*, struct ns1__addCourseTeacher *, const char*, const char*);

#ifndef soap_read_ns1__addCourseTeacher
#define soap_read_ns1__addCourseTeacher(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourseTeacher(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourseTeacher * SOAP_FMAC2 soap_instantiate_ns1__addCourseTeacher(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourseTeacher * soap_new_ns1__addCourseTeacher(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourseTeacher(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourseTeacher * soap_new_req_ns1__addCourseTeacher(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc, std::string& internnummer, std::string& userlist) { struct ns1__addCourseTeacher *_p = soap_instantiate_ns1__addCourseTeacher(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseTeacher(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; _p->internnummer = internnummer; _p->userlist = userlist; } return _p; }

inline struct ns1__addCourseTeacher * soap_new_set_ns1__addCourseTeacher(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc, std::string& internnummer, std::string& userlist) { struct ns1__addCourseTeacher *_p = soap_instantiate_ns1__addCourseTeacher(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseTeacher(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; _p->internnummer = internnummer; _p->userlist = userlist; } return _p; }

inline void soap_delete_ns1__addCourseTeacher(struct soap *soap, struct ns1__addCourseTeacher *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourseTeacher(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourseTeacherResponse
#define SOAP_TYPE_ns1__addCourseTeacherResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourseTeacherResponse(struct soap*, struct ns1__addCourseTeacherResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourseTeacherResponse(struct soap*, const struct ns1__addCourseTeacherResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourseTeacherResponse(struct soap*, const char*, int, const struct ns1__addCourseTeacherResponse *, const char*);
SOAP_FMAC3 struct ns1__addCourseTeacherResponse * SOAP_FMAC4 soap_in_ns1__addCourseTeacherResponse(struct soap*, const char*, struct ns1__addCourseTeacherResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourseTeacherResponse(struct soap*, const struct ns1__addCourseTeacherResponse *, const char*, const char*);

#ifndef soap_write_ns1__addCourseTeacherResponse
#define soap_write_ns1__addCourseTeacherResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourseTeacherResponse(soap, data),0) || soap_put_ns1__addCourseTeacherResponse(soap, data, "ns1:addCourseTeacherResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourseTeacherResponse * SOAP_FMAC4 soap_get_ns1__addCourseTeacherResponse(struct soap*, struct ns1__addCourseTeacherResponse *, const char*, const char*);

#ifndef soap_read_ns1__addCourseTeacherResponse
#define soap_read_ns1__addCourseTeacherResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourseTeacherResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourseTeacherResponse * SOAP_FMAC2 soap_instantiate_ns1__addCourseTeacherResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourseTeacherResponse * soap_new_ns1__addCourseTeacherResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourseTeacherResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourseTeacherResponse * soap_new_req_ns1__addCourseTeacherResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__addCourseTeacherResponse *_p = soap_instantiate_ns1__addCourseTeacherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseTeacherResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__addCourseTeacherResponse * soap_new_set_ns1__addCourseTeacherResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__addCourseTeacherResponse *_p = soap_instantiate_ns1__addCourseTeacherResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseTeacherResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__addCourseTeacherResponse(struct soap *soap, struct ns1__addCourseTeacherResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourseTeacherResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourse
#define SOAP_TYPE_ns1__addCourse (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourse(struct soap*, struct ns1__addCourse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourse(struct soap*, const struct ns1__addCourse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourse(struct soap*, const char*, int, const struct ns1__addCourse *, const char*);
SOAP_FMAC3 struct ns1__addCourse * SOAP_FMAC4 soap_in_ns1__addCourse(struct soap*, const char*, struct ns1__addCourse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourse(struct soap*, const struct ns1__addCourse *, const char*, const char*);

#ifndef soap_write_ns1__addCourse
#define soap_write_ns1__addCourse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourse(soap, data),0) || soap_put_ns1__addCourse(soap, data, "ns1:addCourse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourse * SOAP_FMAC4 soap_get_ns1__addCourse(struct soap*, struct ns1__addCourse *, const char*, const char*);

#ifndef soap_read_ns1__addCourse
#define soap_read_ns1__addCourse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourse * SOAP_FMAC2 soap_instantiate_ns1__addCourse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourse * soap_new_ns1__addCourse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourse * soap_new_req_ns1__addCourse(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc) { struct ns1__addCourse *_p = soap_instantiate_ns1__addCourse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourse(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; } return _p; }

inline struct ns1__addCourse * soap_new_set_ns1__addCourse(struct soap *soap, std::string& accesscode, std::string& coursename, std::string& coursedesc) { struct ns1__addCourse *_p = soap_instantiate_ns1__addCourse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourse(soap, _p); _p->accesscode = accesscode; _p->coursename = coursename; _p->coursedesc = coursedesc; } return _p; }

inline void soap_delete_ns1__addCourse(struct soap *soap, struct ns1__addCourse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__addCourseResponse
#define SOAP_TYPE_ns1__addCourseResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__addCourseResponse(struct soap*, struct ns1__addCourseResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__addCourseResponse(struct soap*, const struct ns1__addCourseResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__addCourseResponse(struct soap*, const char*, int, const struct ns1__addCourseResponse *, const char*);
SOAP_FMAC3 struct ns1__addCourseResponse * SOAP_FMAC4 soap_in_ns1__addCourseResponse(struct soap*, const char*, struct ns1__addCourseResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__addCourseResponse(struct soap*, const struct ns1__addCourseResponse *, const char*, const char*);

#ifndef soap_write_ns1__addCourseResponse
#define soap_write_ns1__addCourseResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__addCourseResponse(soap, data),0) || soap_put_ns1__addCourseResponse(soap, data, "ns1:addCourseResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__addCourseResponse * SOAP_FMAC4 soap_get_ns1__addCourseResponse(struct soap*, struct ns1__addCourseResponse *, const char*, const char*);

#ifndef soap_read_ns1__addCourseResponse
#define soap_read_ns1__addCourseResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__addCourseResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__addCourseResponse * SOAP_FMAC2 soap_instantiate_ns1__addCourseResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__addCourseResponse * soap_new_ns1__addCourseResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__addCourseResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__addCourseResponse * soap_new_req_ns1__addCourseResponse(struct soap *soap, std::string& return_) { struct ns1__addCourseResponse *_p = soap_instantiate_ns1__addCourseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__addCourseResponse * soap_new_set_ns1__addCourseResponse(struct soap *soap, std::string& return_) { struct ns1__addCourseResponse *_p = soap_instantiate_ns1__addCourseResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__addCourseResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__addCourseResponse(struct soap *soap, struct ns1__addCourseResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__addCourseResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllGroupsAndClasses
#define SOAP_TYPE_ns1__getAllGroupsAndClasses (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllGroupsAndClasses(struct soap*, struct ns1__getAllGroupsAndClasses *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllGroupsAndClasses(struct soap*, const struct ns1__getAllGroupsAndClasses *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllGroupsAndClasses(struct soap*, const char*, int, const struct ns1__getAllGroupsAndClasses *, const char*);
SOAP_FMAC3 struct ns1__getAllGroupsAndClasses * SOAP_FMAC4 soap_in_ns1__getAllGroupsAndClasses(struct soap*, const char*, struct ns1__getAllGroupsAndClasses *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllGroupsAndClasses(struct soap*, const struct ns1__getAllGroupsAndClasses *, const char*, const char*);

#ifndef soap_write_ns1__getAllGroupsAndClasses
#define soap_write_ns1__getAllGroupsAndClasses(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllGroupsAndClasses(soap, data),0) || soap_put_ns1__getAllGroupsAndClasses(soap, data, "ns1:getAllGroupsAndClasses", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllGroupsAndClasses * SOAP_FMAC4 soap_get_ns1__getAllGroupsAndClasses(struct soap*, struct ns1__getAllGroupsAndClasses *, const char*, const char*);

#ifndef soap_read_ns1__getAllGroupsAndClasses
#define soap_read_ns1__getAllGroupsAndClasses(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllGroupsAndClasses(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllGroupsAndClasses * SOAP_FMAC2 soap_instantiate_ns1__getAllGroupsAndClasses(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllGroupsAndClasses * soap_new_ns1__getAllGroupsAndClasses(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllGroupsAndClasses(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllGroupsAndClasses * soap_new_req_ns1__getAllGroupsAndClasses(struct soap *soap, std::string& accesscode) { struct ns1__getAllGroupsAndClasses *_p = soap_instantiate_ns1__getAllGroupsAndClasses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllGroupsAndClasses(soap, _p); _p->accesscode = accesscode; } return _p; }

inline struct ns1__getAllGroupsAndClasses * soap_new_set_ns1__getAllGroupsAndClasses(struct soap *soap, std::string& accesscode) { struct ns1__getAllGroupsAndClasses *_p = soap_instantiate_ns1__getAllGroupsAndClasses(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllGroupsAndClasses(soap, _p); _p->accesscode = accesscode; } return _p; }

inline void soap_delete_ns1__getAllGroupsAndClasses(struct soap *soap, struct ns1__getAllGroupsAndClasses *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllGroupsAndClasses(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllGroupsAndClassesResponse
#define SOAP_TYPE_ns1__getAllGroupsAndClassesResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllGroupsAndClassesResponse(struct soap*, struct ns1__getAllGroupsAndClassesResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllGroupsAndClassesResponse(struct soap*, const struct ns1__getAllGroupsAndClassesResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllGroupsAndClassesResponse(struct soap*, const char*, int, const struct ns1__getAllGroupsAndClassesResponse *, const char*);
SOAP_FMAC3 struct ns1__getAllGroupsAndClassesResponse * SOAP_FMAC4 soap_in_ns1__getAllGroupsAndClassesResponse(struct soap*, const char*, struct ns1__getAllGroupsAndClassesResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllGroupsAndClassesResponse(struct soap*, const struct ns1__getAllGroupsAndClassesResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAllGroupsAndClassesResponse
#define soap_write_ns1__getAllGroupsAndClassesResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllGroupsAndClassesResponse(soap, data),0) || soap_put_ns1__getAllGroupsAndClassesResponse(soap, data, "ns1:getAllGroupsAndClassesResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllGroupsAndClassesResponse * SOAP_FMAC4 soap_get_ns1__getAllGroupsAndClassesResponse(struct soap*, struct ns1__getAllGroupsAndClassesResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAllGroupsAndClassesResponse
#define soap_read_ns1__getAllGroupsAndClassesResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllGroupsAndClassesResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllGroupsAndClassesResponse * SOAP_FMAC2 soap_instantiate_ns1__getAllGroupsAndClassesResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllGroupsAndClassesResponse * soap_new_ns1__getAllGroupsAndClassesResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllGroupsAndClassesResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllGroupsAndClassesResponse * soap_new_req_ns1__getAllGroupsAndClassesResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllGroupsAndClassesResponse *_p = soap_instantiate_ns1__getAllGroupsAndClassesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllGroupsAndClassesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getAllGroupsAndClassesResponse * soap_new_set_ns1__getAllGroupsAndClassesResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllGroupsAndClassesResponse *_p = soap_instantiate_ns1__getAllGroupsAndClassesResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllGroupsAndClassesResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getAllGroupsAndClassesResponse(struct soap *soap, struct ns1__getAllGroupsAndClassesResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllGroupsAndClassesResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllAccountsExtended
#define SOAP_TYPE_ns1__getAllAccountsExtended (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllAccountsExtended(struct soap*, struct ns1__getAllAccountsExtended *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllAccountsExtended(struct soap*, const struct ns1__getAllAccountsExtended *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllAccountsExtended(struct soap*, const char*, int, const struct ns1__getAllAccountsExtended *, const char*);
SOAP_FMAC3 struct ns1__getAllAccountsExtended * SOAP_FMAC4 soap_in_ns1__getAllAccountsExtended(struct soap*, const char*, struct ns1__getAllAccountsExtended *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllAccountsExtended(struct soap*, const struct ns1__getAllAccountsExtended *, const char*, const char*);

#ifndef soap_write_ns1__getAllAccountsExtended
#define soap_write_ns1__getAllAccountsExtended(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllAccountsExtended(soap, data),0) || soap_put_ns1__getAllAccountsExtended(soap, data, "ns1:getAllAccountsExtended", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllAccountsExtended * SOAP_FMAC4 soap_get_ns1__getAllAccountsExtended(struct soap*, struct ns1__getAllAccountsExtended *, const char*, const char*);

#ifndef soap_read_ns1__getAllAccountsExtended
#define soap_read_ns1__getAllAccountsExtended(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllAccountsExtended(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllAccountsExtended * SOAP_FMAC2 soap_instantiate_ns1__getAllAccountsExtended(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllAccountsExtended * soap_new_ns1__getAllAccountsExtended(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllAccountsExtended(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllAccountsExtended * soap_new_req_ns1__getAllAccountsExtended(struct soap *soap, std::string& accesscode, std::string& code, std::string& recursive) { struct ns1__getAllAccountsExtended *_p = soap_instantiate_ns1__getAllAccountsExtended(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsExtended(soap, _p); _p->accesscode = accesscode; _p->code = code; _p->recursive = recursive; } return _p; }

inline struct ns1__getAllAccountsExtended * soap_new_set_ns1__getAllAccountsExtended(struct soap *soap, std::string& accesscode, std::string& code, std::string& recursive) { struct ns1__getAllAccountsExtended *_p = soap_instantiate_ns1__getAllAccountsExtended(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsExtended(soap, _p); _p->accesscode = accesscode; _p->code = code; _p->recursive = recursive; } return _p; }

inline void soap_delete_ns1__getAllAccountsExtended(struct soap *soap, struct ns1__getAllAccountsExtended *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllAccountsExtended(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllAccountsExtendedResponse
#define SOAP_TYPE_ns1__getAllAccountsExtendedResponse (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllAccountsExtendedResponse(struct soap*, struct ns1__getAllAccountsExtendedResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllAccountsExtendedResponse(struct soap*, const struct ns1__getAllAccountsExtendedResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllAccountsExtendedResponse(struct soap*, const char*, int, const struct ns1__getAllAccountsExtendedResponse *, const char*);
SOAP_FMAC3 struct ns1__getAllAccountsExtendedResponse * SOAP_FMAC4 soap_in_ns1__getAllAccountsExtendedResponse(struct soap*, const char*, struct ns1__getAllAccountsExtendedResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllAccountsExtendedResponse(struct soap*, const struct ns1__getAllAccountsExtendedResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAllAccountsExtendedResponse
#define soap_write_ns1__getAllAccountsExtendedResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllAccountsExtendedResponse(soap, data),0) || soap_put_ns1__getAllAccountsExtendedResponse(soap, data, "ns1:getAllAccountsExtendedResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllAccountsExtendedResponse * SOAP_FMAC4 soap_get_ns1__getAllAccountsExtendedResponse(struct soap*, struct ns1__getAllAccountsExtendedResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAllAccountsExtendedResponse
#define soap_read_ns1__getAllAccountsExtendedResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllAccountsExtendedResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllAccountsExtendedResponse * SOAP_FMAC2 soap_instantiate_ns1__getAllAccountsExtendedResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllAccountsExtendedResponse * soap_new_ns1__getAllAccountsExtendedResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllAccountsExtendedResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllAccountsExtendedResponse * soap_new_req_ns1__getAllAccountsExtendedResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllAccountsExtendedResponse *_p = soap_instantiate_ns1__getAllAccountsExtendedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsExtendedResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getAllAccountsExtendedResponse * soap_new_set_ns1__getAllAccountsExtendedResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllAccountsExtendedResponse *_p = soap_instantiate_ns1__getAllAccountsExtendedResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsExtendedResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getAllAccountsExtendedResponse(struct soap *soap, struct ns1__getAllAccountsExtendedResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllAccountsExtendedResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllAccounts
#define SOAP_TYPE_ns1__getAllAccounts (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllAccounts(struct soap*, struct ns1__getAllAccounts *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllAccounts(struct soap*, const struct ns1__getAllAccounts *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllAccounts(struct soap*, const char*, int, const struct ns1__getAllAccounts *, const char*);
SOAP_FMAC3 struct ns1__getAllAccounts * SOAP_FMAC4 soap_in_ns1__getAllAccounts(struct soap*, const char*, struct ns1__getAllAccounts *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllAccounts(struct soap*, const struct ns1__getAllAccounts *, const char*, const char*);

#ifndef soap_write_ns1__getAllAccounts
#define soap_write_ns1__getAllAccounts(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllAccounts(soap, data),0) || soap_put_ns1__getAllAccounts(soap, data, "ns1:getAllAccounts", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllAccounts * SOAP_FMAC4 soap_get_ns1__getAllAccounts(struct soap*, struct ns1__getAllAccounts *, const char*, const char*);

#ifndef soap_read_ns1__getAllAccounts
#define soap_read_ns1__getAllAccounts(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllAccounts(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllAccounts * SOAP_FMAC2 soap_instantiate_ns1__getAllAccounts(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllAccounts * soap_new_ns1__getAllAccounts(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllAccounts(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllAccounts * soap_new_req_ns1__getAllAccounts(struct soap *soap, std::string& accesscode, std::string& code, std::string& recursive) { struct ns1__getAllAccounts *_p = soap_instantiate_ns1__getAllAccounts(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccounts(soap, _p); _p->accesscode = accesscode; _p->code = code; _p->recursive = recursive; } return _p; }

inline struct ns1__getAllAccounts * soap_new_set_ns1__getAllAccounts(struct soap *soap, std::string& accesscode, std::string& code, std::string& recursive) { struct ns1__getAllAccounts *_p = soap_instantiate_ns1__getAllAccounts(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccounts(soap, _p); _p->accesscode = accesscode; _p->code = code; _p->recursive = recursive; } return _p; }

inline void soap_delete_ns1__getAllAccounts(struct soap *soap, struct ns1__getAllAccounts *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllAccounts(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__getAllAccountsResponse
#define SOAP_TYPE_ns1__getAllAccountsResponse (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getAllAccountsResponse(struct soap*, struct ns1__getAllAccountsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getAllAccountsResponse(struct soap*, const struct ns1__getAllAccountsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getAllAccountsResponse(struct soap*, const char*, int, const struct ns1__getAllAccountsResponse *, const char*);
SOAP_FMAC3 struct ns1__getAllAccountsResponse * SOAP_FMAC4 soap_in_ns1__getAllAccountsResponse(struct soap*, const char*, struct ns1__getAllAccountsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getAllAccountsResponse(struct soap*, const struct ns1__getAllAccountsResponse *, const char*, const char*);

#ifndef soap_write_ns1__getAllAccountsResponse
#define soap_write_ns1__getAllAccountsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getAllAccountsResponse(soap, data),0) || soap_put_ns1__getAllAccountsResponse(soap, data, "ns1:getAllAccountsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getAllAccountsResponse * SOAP_FMAC4 soap_get_ns1__getAllAccountsResponse(struct soap*, struct ns1__getAllAccountsResponse *, const char*, const char*);

#ifndef soap_read_ns1__getAllAccountsResponse
#define soap_read_ns1__getAllAccountsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__getAllAccountsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__getAllAccountsResponse * SOAP_FMAC2 soap_instantiate_ns1__getAllAccountsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__getAllAccountsResponse * soap_new_ns1__getAllAccountsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__getAllAccountsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__getAllAccountsResponse * soap_new_req_ns1__getAllAccountsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllAccountsResponse *_p = soap_instantiate_ns1__getAllAccountsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__getAllAccountsResponse * soap_new_set_ns1__getAllAccountsResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__getAllAccountsResponse *_p = soap_instantiate_ns1__getAllAccountsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__getAllAccountsResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__getAllAccountsResponse(struct soap *soap, struct ns1__getAllAccountsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__getAllAccountsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClass
#define SOAP_TYPE_ns1__saveClass (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClass(struct soap*, struct ns1__saveClass *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClass(struct soap*, const struct ns1__saveClass *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClass(struct soap*, const char*, int, const struct ns1__saveClass *, const char*);
SOAP_FMAC3 struct ns1__saveClass * SOAP_FMAC4 soap_in_ns1__saveClass(struct soap*, const char*, struct ns1__saveClass *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClass(struct soap*, const struct ns1__saveClass *, const char*, const char*);

#ifndef soap_write_ns1__saveClass
#define soap_write_ns1__saveClass(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClass(soap, data),0) || soap_put_ns1__saveClass(soap, data, "ns1:saveClass", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClass * SOAP_FMAC4 soap_get_ns1__saveClass(struct soap*, struct ns1__saveClass *, const char*, const char*);

#ifndef soap_read_ns1__saveClass
#define soap_read_ns1__saveClass(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClass(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClass * SOAP_FMAC2 soap_instantiate_ns1__saveClass(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClass * soap_new_ns1__saveClass(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClass(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClass * soap_new_req_ns1__saveClass(struct soap *soap, std::string& accesscode, struct soap_dom_element& name, struct soap_dom_element& desc, struct soap_dom_element& code, struct soap_dom_element& parent, struct soap_dom_element& untis, struct soap_dom_element& instituteNumber, struct soap_dom_element& adminNumber, struct soap_dom_element& schoolYearDate) { struct ns1__saveClass *_p = soap_instantiate_ns1__saveClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClass(soap, _p); _p->accesscode = accesscode; _p->name = name; _p->desc = desc; _p->code = code; _p->parent = parent; _p->untis = untis; _p->instituteNumber = instituteNumber; _p->adminNumber = adminNumber; _p->schoolYearDate = schoolYearDate; } return _p; }

inline struct ns1__saveClass * soap_new_set_ns1__saveClass(struct soap *soap, std::string& accesscode, struct soap_dom_element& name, struct soap_dom_element& desc, struct soap_dom_element& code, struct soap_dom_element& parent, struct soap_dom_element& untis, struct soap_dom_element& instituteNumber, struct soap_dom_element& adminNumber, struct soap_dom_element& schoolYearDate) { struct ns1__saveClass *_p = soap_instantiate_ns1__saveClass(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClass(soap, _p); _p->accesscode = accesscode; _p->name = name; _p->desc = desc; _p->code = code; _p->parent = parent; _p->untis = untis; _p->instituteNumber = instituteNumber; _p->adminNumber = adminNumber; _p->schoolYearDate = schoolYearDate; } return _p; }

inline void soap_delete_ns1__saveClass(struct soap *soap, struct ns1__saveClass *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClass(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveClassResponse
#define SOAP_TYPE_ns1__saveClassResponse (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveClassResponse(struct soap*, struct ns1__saveClassResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveClassResponse(struct soap*, const struct ns1__saveClassResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveClassResponse(struct soap*, const char*, int, const struct ns1__saveClassResponse *, const char*);
SOAP_FMAC3 struct ns1__saveClassResponse * SOAP_FMAC4 soap_in_ns1__saveClassResponse(struct soap*, const char*, struct ns1__saveClassResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveClassResponse(struct soap*, const struct ns1__saveClassResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveClassResponse
#define soap_write_ns1__saveClassResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveClassResponse(soap, data),0) || soap_put_ns1__saveClassResponse(soap, data, "ns1:saveClassResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveClassResponse * SOAP_FMAC4 soap_get_ns1__saveClassResponse(struct soap*, struct ns1__saveClassResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveClassResponse
#define soap_read_ns1__saveClassResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveClassResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveClassResponse * SOAP_FMAC2 soap_instantiate_ns1__saveClassResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveClassResponse * soap_new_ns1__saveClassResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveClassResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveClassResponse * soap_new_req_ns1__saveClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassResponse *_p = soap_instantiate_ns1__saveClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveClassResponse * soap_new_set_ns1__saveClassResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveClassResponse *_p = soap_instantiate_ns1__saveClassResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveClassResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveClassResponse(struct soap *soap, struct ns1__saveClassResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveClassResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUser
#define SOAP_TYPE_ns1__saveUser (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUser(struct soap*, struct ns1__saveUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUser(struct soap*, const struct ns1__saveUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUser(struct soap*, const char*, int, const struct ns1__saveUser *, const char*);
SOAP_FMAC3 struct ns1__saveUser * SOAP_FMAC4 soap_in_ns1__saveUser(struct soap*, const char*, struct ns1__saveUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUser(struct soap*, const struct ns1__saveUser *, const char*, const char*);

#ifndef soap_write_ns1__saveUser
#define soap_write_ns1__saveUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUser(soap, data),0) || soap_put_ns1__saveUser(soap, data, "ns1:saveUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUser * SOAP_FMAC4 soap_get_ns1__saveUser(struct soap*, struct ns1__saveUser *, const char*, const char*);

#ifndef soap_read_ns1__saveUser
#define soap_read_ns1__saveUser(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUser * SOAP_FMAC2 soap_instantiate_ns1__saveUser(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUser * soap_new_ns1__saveUser(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUser(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUser * soap_new_req_ns1__saveUser(struct soap *soap, std::string& accesscode, std::string& internnumber, std::string& username, std::string& passwd1, std::string& passwd2, std::string& passwd3, std::string& name, std::string& surname, std::string& extranames, std::string& initials, std::string& sex, std::string& birthday, std::string& birthplace, std::string& birthcountry, std::string& address, std::string& postalcode, std::string& location, std::string& country, std::string& email, std::string& mobilephone, std::string& homephone, std::string& fax, std::string& prn, std::string& stamboeknummer, std::string& basisrol, std::string& untis) { struct ns1__saveUser *_p = soap_instantiate_ns1__saveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUser(soap, _p); _p->accesscode = accesscode; _p->internnumber = internnumber; _p->username = username; _p->passwd1 = passwd1; _p->passwd2 = passwd2; _p->passwd3 = passwd3; _p->name = name; _p->surname = surname; _p->extranames = extranames; _p->initials = initials; _p->sex = sex; _p->birthday = birthday; _p->birthplace = birthplace; _p->birthcountry = birthcountry; _p->address = address; _p->postalcode = postalcode; _p->location = location; _p->country = country; _p->email = email; _p->mobilephone = mobilephone; _p->homephone = homephone; _p->fax = fax; _p->prn = prn; _p->stamboeknummer = stamboeknummer; _p->basisrol = basisrol; _p->untis = untis; } return _p; }

inline struct ns1__saveUser * soap_new_set_ns1__saveUser(struct soap *soap, std::string& accesscode, std::string& internnumber, std::string& username, std::string& passwd1, std::string& passwd2, std::string& passwd3, std::string& name, std::string& surname, std::string& extranames, std::string& initials, std::string& sex, std::string& birthday, std::string& birthplace, std::string& birthcountry, std::string& address, std::string& postalcode, std::string& location, std::string& country, std::string& email, std::string& mobilephone, std::string& homephone, std::string& fax, std::string& prn, std::string& stamboeknummer, std::string& basisrol, std::string& untis) { struct ns1__saveUser *_p = soap_instantiate_ns1__saveUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUser(soap, _p); _p->accesscode = accesscode; _p->internnumber = internnumber; _p->username = username; _p->passwd1 = passwd1; _p->passwd2 = passwd2; _p->passwd3 = passwd3; _p->name = name; _p->surname = surname; _p->extranames = extranames; _p->initials = initials; _p->sex = sex; _p->birthday = birthday; _p->birthplace = birthplace; _p->birthcountry = birthcountry; _p->address = address; _p->postalcode = postalcode; _p->location = location; _p->country = country; _p->email = email; _p->mobilephone = mobilephone; _p->homephone = homephone; _p->fax = fax; _p->prn = prn; _p->stamboeknummer = stamboeknummer; _p->basisrol = basisrol; _p->untis = untis; } return _p; }

inline void soap_delete_ns1__saveUser(struct soap *soap, struct ns1__saveUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__saveUserResponse
#define SOAP_TYPE_ns1__saveUserResponse (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__saveUserResponse(struct soap*, struct ns1__saveUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__saveUserResponse(struct soap*, const struct ns1__saveUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__saveUserResponse(struct soap*, const char*, int, const struct ns1__saveUserResponse *, const char*);
SOAP_FMAC3 struct ns1__saveUserResponse * SOAP_FMAC4 soap_in_ns1__saveUserResponse(struct soap*, const char*, struct ns1__saveUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__saveUserResponse(struct soap*, const struct ns1__saveUserResponse *, const char*, const char*);

#ifndef soap_write_ns1__saveUserResponse
#define soap_write_ns1__saveUserResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__saveUserResponse(soap, data),0) || soap_put_ns1__saveUserResponse(soap, data, "ns1:saveUserResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__saveUserResponse * SOAP_FMAC4 soap_get_ns1__saveUserResponse(struct soap*, struct ns1__saveUserResponse *, const char*, const char*);

#ifndef soap_read_ns1__saveUserResponse
#define soap_read_ns1__saveUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__saveUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns1__saveUserResponse * SOAP_FMAC2 soap_instantiate_ns1__saveUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__saveUserResponse * soap_new_ns1__saveUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__saveUserResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__saveUserResponse * soap_new_req_ns1__saveUserResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserResponse *_p = soap_instantiate_ns1__saveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserResponse(soap, _p); _p->return_ = return_; } return _p; }

inline struct ns1__saveUserResponse * soap_new_set_ns1__saveUserResponse(struct soap *soap, struct soap_dom_element& return_) { struct ns1__saveUserResponse *_p = soap_instantiate_ns1__saveUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns1__saveUserResponse(soap, _p); _p->return_ = return_; } return _p; }

inline void soap_delete_ns1__saveUserResponse(struct soap *soap, struct ns1__saveUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__saveUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyAttribute
#define SOAP_TYPE_xsd__anyAttribute (11)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyAttribute2s(struct soap*, struct soap_dom_attribute);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyAttribute(struct soap*, const char*, int, const struct soap_dom_attribute *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *);
SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_in_xsd__anyAttribute(struct soap*, const char*, struct soap_dom_attribute *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyAttribute(struct soap*, const struct soap_dom_attribute *, const char*, const char*);

#ifndef soap_write_xsd__anyAttribute
#define soap_write_xsd__anyAttribute(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyAttribute(soap, data),0) || soap_put_xsd__anyAttribute(soap, data, "xsd:anyAttribute", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct soap_dom_attribute * SOAP_FMAC4 soap_get_xsd__anyAttribute(struct soap*, struct soap_dom_attribute *, const char*, const char*);

#ifndef soap_read_xsd__anyAttribute
#define soap_read_xsd__anyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct soap_dom_attribute * SOAP_FMAC2 soap_instantiate_xsd__anyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_attribute * soap_new_xsd__anyAttribute(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyAttribute(soap, n, NULL, NULL, NULL); }

inline struct soap_dom_attribute * soap_new_req_xsd__anyAttribute(struct soap *soap) { struct soap_dom_attribute *_p = soap_instantiate_xsd__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline struct soap_dom_attribute * soap_new_set_xsd__anyAttribute(struct soap *soap) { struct soap_dom_attribute *_p = soap_instantiate_xsd__anyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline void soap_delete_xsd__anyAttribute(struct soap *soap, struct soap_dom_attribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyAttribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (9)
#endif
SOAP_FMAC1 void SOAP_FMAC2 soap_default_xsd__anyType(struct soap*, struct soap_dom_element *);
SOAP_FMAC1 void SOAP_FMAC2 soap_serialize_xsd__anyType(struct soap*, const struct soap_dom_element *);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__anyType2s(struct soap*, struct soap_dom_element);
SOAP_FMAC1 int SOAP_FMAC2 soap_out_xsd__anyType(struct soap*, const char*, int, const struct soap_dom_element *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__anyType(struct soap*, const char*, struct soap_dom_element *);
SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_in_xsd__anyType(struct soap*, const char*, struct soap_dom_element *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyType(struct soap*, const struct soap_dom_element *, const char*, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__anyType(soap, data),0) || soap_put_xsd__anyType(soap, data, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct soap_dom_element * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, struct soap_dom_element *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct soap_dom_element * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline struct soap_dom_element * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline struct soap_dom_element * soap_new_req_xsd__anyType(struct soap *soap) { struct soap_dom_element *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline struct soap_dom_element * soap_new_set_xsd__anyType(struct soap *soap) { struct soap_dom_element *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, struct soap_dom_element *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
