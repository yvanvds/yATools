#!/bin/bash
. scripts/functions

installDebianPackages() {
  for pkg in $(cat data/packagelist); do
    installPackage $pkg
  done
  waitForEnter
}

installScripts() {
    #check for localized ntp servers
    if grep "ubuntu.pool" /etc/ntp.conf > /dev/null
    then
       sed -i 's/ubuntu.pool/be.pool/' /etc/ntp.conf
       echo "Changed /etc/ntp.conf to use local servers."
       printChange "Time Server Configuration" "REPAIRED"
       service ntp reload
    else
       printSuccess "Time Server Configuration" "OK"
    fi

    # put network checker in place
    if [ scripts_to_install/checkNetwork -nt /sbin/checkNetwork ]; then
      cp -fr scripts_to_install/checkNetwork /sbin
      printChange "verifying network restarter" "INSTALLING"      
    else
      printSuccess "verifying network restarter" "OK"
    fi

    addCronJob "*/2 * * * *" "/sbin/checkNetwork"
    printSuccess "adding checkNetwork to cron" "OK"

    # add sudo files
    if [ scripts_to_install/wwwSudo -nt /etc/sudoers.d/wwwSudo ]; then
      cp -fr scripts_to_install/wwwSudo /etc/sudoers.d/wwwSudo
      printChange "verifying apache sudo" "INSTALLING"
    else
      printSuccess "verifying apache sudo" "OK"
    fi
    
    #add squid controller
    if [ scripts_to_install/restartSquid -nt /sbin/restartSquid ]; then
      cp -fr scripts_to_install/restartSquid /sbin
      printChange "verifying squid restarter" "INSTALLING"
    else
      printSuccess "verifying squid restarter" "OK"
    fi

    # add cron jobs for squid
    # TODO make sure this file is loaded in squid.conf
    touch /etc/squid3/roomfilter.conf

    # TODO this did not work. Why?
    #addCronJob "30 8 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "20 9 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "15 10 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "10 11 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "0 12 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "50 12 * * *" "/sbin/admin proxy --reset &> /dev/null" 
    #addCronJob "40 13 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "35 14 * * *" "/sbin/admin proxy --reset &> /dev/null"
    #addCronJob "30 15 * * *" "/sbin/admin proxy --reset &> /dev/null"
    printSuccess "adding squid resets to cron" "OK"

    waitForEnter
}


installWT() {
    #download from github
    if [ -f ../wt/INSTALL ]; then
      printSuccess  "verifying wt presence" "OK"
    else
      printChange "verifying wt presence" "DOWNLOADING"
      cd ..
      git clone git://github.com/kdeforche/wt.git
      cd yATools
    fi
    # check if wt is installed
    if [ -d /usr/local/include/Wt ]; then
      printSuccess "verifying wt installation" "OK"
    else
      printChange "verifying wt installation" "COMPILING"
      cd ../wt
      createDir build
      cd build
      cmake ../
      make
      make install
      cd ../../yATools
    fi
    # adjust file permissions
    mkdir /var/run/wt
    chown -R www-data:www-data /var/run/wt
    touch /var/log/wt_errors.log
    chown -R www-data:www-data /var/log/wt_errors.log
    
    waitForEnter
}

installBoost() {
    if [ -f /usr/include/boost/process.hpp ]; then
      printSuccess "checking for boost process" "OK"
    else
      cp -fr dependencies/boost_process/boost/* /usr/include/boost
      printChange "checking for boost process" "INSTALLING"
    fi
    waitForEnter
}

installAdmintools(){
  git pull
  cd libadmintools

  if [ "$cleanFirst" = true ]; then
		make CONF=Release clean
		printChange "Cleaning previous build" "CLEANING"
		waitForEnter
  fi

  make CONF=Release build
  cp dist/Release/GNU-Linux-x86/liblibadmintools.so /usr/lib
  cd ..
  rm /var/log/admintools
  touch /var/log/admintools
  chown www-data:www-data /var/log/admintools
  printSuccess "admin lib is updated" "OK"
  waitForEnter
  
  cd admin

  if [ "$cleanFirst" = true ]; then
    printChange "Cleaning previous build" "CLEANING"
    make CONF=Release clean
    waitForEnter
  fi

  make CONF=Release build
  cp dist/Release/GNU-Linux-x86/admin /sbin
  cd ..
  printSuccess "admin command is updated" "OK"
  waitForEnter

}

installWebLogin() {
  git pull
  cd weblogin

  if [ "$cleanFirst" = true ]; then
    make CONF=Release clean
  fi

  make CONF=Release build

  # create dirs if they don't exist
  createDir /var/www/apps
  createDir /var/www/apps/weblogin
	createDir /var/www/apps/yearbookImages

  # remove files if they exist
  if [ -f /var/www/apps/weblogin/weblogin.wt ]; then
    rm /var/www/apps/weblogin/weblogin.wt
  fi
  cp dist/Release/GNU-Linux-x86/weblogin /var/www/apps/weblogin/weblogin.wt


  cp -fr yearbook_latex /var/www/apps/weblogin
  chown -R www-data:www-data /var/www/apps/weblogin

  cd ..
	
  cp -fr data/resources /var/www/apps/weblogin/
  chown -R www-data:www-data /var/www/apps/weblogin

  service apache2 restart

  printSuccess "Weblogin application is updated" "OK"
  waitForEnter
}

downloadSmartschool() {
  cd libadmintools/smartschool
  wsdl2h -o interface.h https://sanctamaria-aarschot.smartschool.be/Webservices/V3?wsdl
  soapcpp2 -i -C -I/usr/share/gsoap/import/ interface.h
  printSuccess "Smartschool SOAP api updated" "OK"
  cd ../..
}

verifyInstalledSoftware() {
  cmd=(dialog --separate-output --backtitle "yvan's admin tools" --checklist "Choose Actions:" 15 60 8)
  options=(1 "Verify Debian Packages" on
           2 "Verify Scripts" on
           3 "Verify WT installation" off
           4 "Verify Boost process" off
           5 "Clean before build" off
           6 "download smartschool api (code review needed)" off
           7 "Reinstall account admin tools" off
           8 "Reinstall Web Application" off)
  choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
  clear 
  
  cleanFirst=false
  for choice in $choices; do
    case $choice in
      1) installDebianPackages ;;
      2) installScripts ;;
      3) installWT ;;
      4) installBoost ;;
      5) cleanFirst=true ;;
      6) downloadSmartschool ;;
      7) installAdmintools ;;
      8) installWebLogin;;
   esac
  done
}



