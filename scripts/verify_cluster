#!/bin/bash
. scripts/functions

verifyMulticast() {
  echo
  read -r -p "Verify corosync configuration?[y/N] " response
  response=${response,,}
  if [[ $response =~ (yes|y)$ ]]; then
    export ais_port=5405
    export ais_mcast=226.94.1.1
    export ais_addr=192.168.0.0

    printBox "Current Corosync Configuration"
    env | grep ais_
    echo
    
    sed -i.bak "s/.*mcastaddr:.*/mcastaddr:\ $ais_mcast/g" /etc/corosync/corosync.conf
    sed -i.bak "s/.*mcastport:.*/mcastport:\ $ais_port/g" /etc/corosync/corosync.conf
    sed -i.bak "s/.*bindnetaddr:.*/bindnetaddr:\ $ais_addr/g" /etc/corosync/corosync.conf
    
    # add pacemaker service
    if grep "pacemaker" /etc/corosync/corosync.conf > /dev/null
    then
       printSuccess "Check for pacemaker in corosync" "OK"
    else
       printChange "Check for pacemaker in corosync" "ADDING"
       cat /root/github/yATools/data/corosync >> /etc/corosync/corosync.conf
    fi 

    printSuccess "updating /etc/corosync/corosync.donf" "OK"

    if [ -f /etc/corosync/authkey ]; then
      printSuccess "Check for authkey in corosync" "OK"
    else
      printFailed "Check for authkey in corosync" "FAILED"
      read -p "An authkey must be copied from an existing server and placed in /etc/corosync. Press [Enter] to continue."
      
    fi

    if [ -n "'grep START=yes /etc/default/corosync > /dev/null'" ]; then
       printSuccess "Check corosync start at boot" "OK"
    else 
       cp /root/github/yATools/data/corosync /etc/default/
       printChange "Check corosync start at boot" "ADDING"
    fi

    # restart corosync
    echo
    restartService corosync
    echo
    restartService pacemaker
  fi
  
}

