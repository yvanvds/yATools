#!/bin/bash

installPackage() {
  problem=$(dpkg -s $1|grep installed)
  echo Checking for $1: $problem
  if [ "" == "$problem" ]; then
    apt-get -y install $1
  fi
}

addCronJob() {
  job="$1 $2"
  cat <(fgrep -i -v "$2" <(crontab -l)) <(echo "$job") | crontab
}

createDir() {
  if [ ! -d $1 ]; then
    mkdir $1
  fi
}

echo "Welcome to yvan's admin tools!"
read -r -p "Verify installed software?[y/N]" response
response=${response,,}
if [[ $response =~ (yes|y)$ ]]
then 
    installPackage build-essential
    installPackage cmake
    installPackage libboost-all-dev
    installPackage libmysqlclient-dev
    installPackage libfcgi-dev
    installPackage graphicsmagick
    installPackage libgraphicsmagick++1-dev
    installPackage libpango-1.0-0
    installPackage libpango1.0-dev
    installPackage libhpdf-dev
    installPackage freeglut3-dev
    installPackage libgl1-mesa-dev
    installPackage mesa-utils
    installPackage pkg-config
    installPackage doxygen
    installPackage libldap2-dev
    installPackage libssl-dev
    installPackage libmysqlcppconn-dev
    installPackage libmysql++-dev
    installPackage libcppunit-dev
    installPackage ntp

    # for cluster software
    installPackage corosync
    installPackage pacemaker

    #check for localized ntp servers
    if grep "ubuntu.pool" /etc/ntp.conf > /dev/null
    then 
       sed -i 's/ubuntu.pool/be.pool/' /etc/ntp.conf
       echo "Changed /etc/ntp.conf to use local servers."
       service ntp reload
    fi

    # we need wt from github
    if [ -f ../wt/INSTALL ]; then
      echo "wt is present" 
    else 
      cd ..
      git clone git://github.com/kdeforche/wt.git
      cd yATools
    fi
    # check if wt is installed
    if [ -d /usr/local/include/Wt ]; then
      echo "wt is installed"
    else
      cd ../wt
      createDir build
      cd build
      cmake ../
      make
      make install
      cd ../../yATools
    fi
    
    # copy boost process
    if [ -f /usr/include/boost/process.hpp ]; then
      echo "boost process is in place" 
    else
      cp -fr dependencies/boost_process/boost/* /usr/include/boost
      echo "copied boost process to /usr/include/boost" 
    fi

    # put network checker in place
    if [ -f /sbin/checkNetwork ]; then
      echo "network check is in place" 
    else 
      cp -fr scripts/checkNetwork /sbin
      echo "copied network check to /sbin/checkNetwork" 
    fi
    addCronJob "*/2 * * * *" "/sbin/checkNetwork"
fi



# install libadmintools
read -r -p "Install libAdminTools?[y/N]" response
response=${response,,}
if [[ $response =~ (yes|y)$ ]]
then
  git pull
  cd libadmintools
  make CONF=Release build
  cp dist/Release/GNU-Linux-x86/liblibadmintools.so /usr/lib
  cd ..
  rm /var/log/admintools
  touch /var/log/admintools
  chown www-data:www-data /var/log/admintools
fi

# install cockpit
read -r -p "Install cockpit?[y/N]" response
response=${response,,}
if [[ $response =~ (yes|y)$ ]]
then
  git pull
  cd cockpit
  make CONF=Release build
  cp dist/Release/GNU-Linux-x86/cockpit /sbin
  cd ..
  createDir /root/admintools
fi


# install yearbook application
read -r -p "Install Yearbook app?[y/N]" response
response=${response,,}
if [[ $response =~ (yes|y)$ ]]
then
  git pull
  cd yearBook
  make CONF=Release build
  
  # create dirs if they don't exist
  createDir /var/www/apps
  createDir /var/www/apps/yearbook 
  
  # remove files if they exist
  if [ -f /var/www/apps/yearbook/yearbook.wt ]; then
    rm /var/www/apps/yearbook/yearbook.wt
  fi

  cp dist/Release_fastcgi/GNU-Linux-x86/yearbook /var/www/apps/yearbook/yearbook.wt
  cd ../yearbookAdmin
  make CONF=Release build

  if [ -f /var/www/app/yearbook/yearbookAdmin.wt ]; then
    rm /var/www/apps/yearbook/yearbookAdmin.wt
  fi

  cp dist/Release/GNU-Linux-x86/yearbookadmin /var/www/apps/yearbook/yearbookAdmin.wt
  cp -fr yearbook_latex /var/www/apps/yearbook
  chown -R www-data:www-data /var/www/apps/yearbook
  service apache2 restart
  cd ..
fi

